'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AjaxList = function () {
    function AjaxList(container) {
        _classCallCheck(this, AjaxList);

        var _self = this;
        _self.$ = $(container), _self.$list = _self.$.find('.ajax-paged-list');
        _self.typeList = _self.$list.attr('data-list');
        _self.$filters = _self.$.find('.filters-part');
        _self.$search = _self.$filters.find('.search-post');
        _self.$listFilters = _self.$filters.find('.list-filters');
        _self.$selectors = _self.$filters.find('.selector');
        _self.hasValue = _self.$list.hasClass('w-value');
        _self.filterParams = [];
        _self.curPage = 1;
        _self.postExists = true;
        _self.loading = false;
        _self.loadMorePost = false;
        _self.isSearch = false;
        _self.$loader = '<div class="loader-list"><i></i></div>';

        _self.$more = '<div class="load-more button button-txt red"><p></p></div>';
        _self.$list.append(_self.$more);

        _self.$loadMore = _self.$list.find('.load-more');

        if (dapper.lang === 'fr') _self.$loadMore.find('p').text('Charger plus');else _self.$loadMore.find('p').text('Load more');

        _self.init();

        _self.bindEvents();
    }

    _createClass(AjaxList, [{
        key: 'init',
        value: function init() {
            var _self = this;

            if (_self.$list.find('.last').length > 0) {
                _self.$loadMore.addClass('disabled');
            }

            /* EVENTSSSSSSSSS  */

            if (_self.$list.hasClass('list-events')) {
                _self.filterParams.push({
                    name: 'type',
                    value: _self.$list.data('type')
                });

                _self.filterParams.push({
                    name: 'time',
                    value: _self.$list.data('time')
                });
            }

            /* RESSOURCES  */

            if (_self.$list.hasClass('list-resources')) {
                _self.filterParams.push({
                    name: 'category',
                    value: _self.$list.data('category')
                });
            }

            /* PRODCUTS  */

            if (_self.$list.hasClass('list-products')) {
                _self.filterParams.push({
                    name: 'category',
                    value: _self.$list.data('category')
                });
            }

            /* FIRST */
            //TM.staggerTo(_self.$list.find('.box'), 1, {opacity:1, y:0, ease:Power2.easeOut},0.05);
        }
    }, {
        key: 'bindEvents',
        value: function bindEvents() {

            var _self = this;

            /* SELECTORS */

            _self.$selectors.on('click', 'li', function () {

                if (_self.isSearch) _self.clearSearch();

                _self.submit_cat();
            });

            /* SEARCH */

            _self.$search.on('click', '.submit', function () {
                _self.isSearch = true;
                _self.clearFilters();
                _self.submit_cat();
            });

            /* MORE */
            _self.$loadMore.on('click', function () {
                _self.load_more_post();
            });
        }
    }, {
        key: 'load_more_post',
        value: function load_more_post() {

            var _self = this;

            if (!_self.loading && _self.postExists) {
                _self.loadingMorepost = true;

                /* ###### ARTWORKS ######### */
                if (_self.$.find('.slideshow').length > 0 && _self.curPage === 1) {
                    _self.filterParams.push({
                        name: 'first',
                        value: true
                    });
                }

                _self.curPage++;
                _self.addLoader();
            }
        }
    }, {
        key: 'submit_cat',
        value: function submit_cat() {

            var _self = this;
            _self.filterParams = [];

            if (_self.hasValue) {
                _self.filterParams.push({
                    name: 'meta_value',
                    value: _self.$lis_self.attr('data-value')
                });
            };

            /* SELECTORS */

            _self.$selectors.each(function () {

                var $this = $(this);
                if ($this.find('.selected').attr('data-value')) {
                    _self.filterParams.push({
                        name: $this.attr('data-filter'),
                        value: $this.find('.selected').attr('data-value')
                    });
                }
            });

            /* SEARCH */

            if (_self.isSearch) {
                _self.filterParams.push({
                    name: 'search',
                    value: _self.$search.find('input').val()
                });
            }

            /* EVENTSSSSSSSSS  */

            if (_self.$list.hasClass('list-events')) {
                _self.filterParams.push({
                    name: 'type',
                    value: _self.$list.data('type')
                });

                _self.filterParams.push({
                    name: 'time',
                    value: _self.$list.data('time')
                });
            }

            /* RESOURCESSSS  */

            if (_self.$list.hasClass('list-resources')) {
                _self.filterParams.push({
                    name: 'category',
                    value: _self.$list.data('category')
                });
            }

            /* PRODUCTS  */

            if (_self.$list.hasClass('list-products')) {
                _self.filterParams.push({
                    name: 'category',
                    value: _self.$list.data('category')
                });
            }

            _self.loading = true;
            _self.postExists = false;
            _self.curPage = 1;

            if (_self.$.hasClass('w-slideshow')) {
                TM.to(_self.$.find('.slideshow'), 0.3, { autoAlpha: 0, ease: Power2.easeOut, onComplete: function onComplete() {
                        _self.$.find('.slideshow').remove();
                        _self.$.removeClass('w-slideshow');
                    } });
            }

            _self.$list.height(300);

            if (_self.$list.find('.box').length > 0) {

                TM.staggerTo(_self.$list.find('.box'), 0.3, { opacity: 0, ease: Power2.easeOut }, 0.05, function () {
                    _self.$list.find('.box').remove();
                    _self.addLoader();
                });
            } else _self.addLoader();
        }
    }, {
        key: 'clearFilters',
        value: function clearFilters() {

            var _self = this;

            _self.$selectors.each(function () {
                $(this).find('.selected').text($(this).find('li:first').text());
                $(this).find('.selected').attr('data-value', '');
            });
        }
    }, {
        key: 'clearSearch',
        value: function clearSearch() {

            var _self = this;

            _self.isSearch = false;
            _self.$search.find('input').val('');
            _self.$search.find('input').attr('placeholder', _self.$search.attr('data-placeholder'));
        }
    }, {
        key: 'addLoader',
        value: function addLoader() {
            var _self = this;

            if (_self.loadingMorepost) _self.$list.addClass('load-more-post');

            // efface le message si existe déjà
            var $noResult = _self.$list.find('.no-results');
            if ($noResult.length > 0) $noResult.remove();

            _self.$loadMore.addClass('disabled');
            _self.$list.append(_self.$loader);

            _self.load_post();
        }
    }, {
        key: 'load_post',
        value: function load_post() {
            var _self = this;
            var url = dapper.ajaxurl + '?action=get_list_' + _self.typeList;

            if (url.indexOf('?') !== -1) {
                url += '&ajax&pa=' + _self.curPage;
            } else {
                url += '?ajax&pa=' + _self.curPage;
            }

            $.ajax({
                url: url,
                type: "GET",
                data: _self.filterParams,
                beforeSend: function beforeSend() {
                    _self.loading = true;
                },
                success: function success(data, _success, jqXHR) {
                    try {
                        var json = JSON.parse(data);
                        if (json.end) _self.postExists = false;
                    } catch (e) {
                        _self.postExists = true;
                    }

                    if (_self.postExists) {

                        // console.log('in ajax');

                        var $items = $(data);

                        if (_self.loadingMorepost) {
                            _self.$list.removeClass('load-more-post');
                            _self.$list.find('.clear-list').before($items);
                            _self.loadingMorepost = false;
                        } else {
                            _self.$list.prepend($items);
                        }

                        app.LoaderManager.loadAllImages($items.find('img'), function () {

                            // pour le touch device etat de hover
                            if ($items.hasClass('box-artwork') && window.isMobileTablet) $items.addClass('hover');

                            _self.loading = false;
                            _self.$list.find('.loader-list').remove();
                            TM.staggerTo($items, 1, { opacity: 1, y: 0, ease: Power2.easeOut }, 0.05);

                            if (!_self.$list.find('.last').length > 0) {
                                _self.$loadMore.removeClass('disabled');
                            }

                            TM.to(_self.$list, 0.5, { height: 'auto' });
                        });

                        // AJOUTE LE HOVER SUR LES NOUVELLES BOXES
                        $items.find('.border-hover').each(function () {

                            // console.log('hover added')

                            var $this = $(this);
                            $this.append('<div class="line-hover"></div>');
                            var w = $this.attr('data-hover') ? $this.attr('data-hover') + '%' : $this.find('.line-hover').siblings('.col-70').outerWidth() + 'px';

                            // set un resize uniquement pour les valeur en px
                            if ($this.attr('data-hover') === undefined) {
                                $window.on('resize', function () {
                                    w = $this.attr('data-hover') !== undefined ? $this.attr('data-hover') + '%' : $this.find('.line-hover').siblings('.col-70').outerWidth() + 'px';
                                });
                            }

                            $this.on('mouseenter', function (e) {

                                if ($this.hasClass('box-wishlist') && $(e.target).is('.icon-close') || $(e.target).parent().is('.remove-item')) return;

                                TM.to($this.find('.line-hover'), 0.6, { width: w, ease: Power2.easeInOut, onComplete: function onComplete() {
                                        $this.find('.line-hover').addClass('right');
                                    } });
                            });

                            $this.on('mouseleave', function () {
                                TM.to($this.find('.line-hover'), 0.4, { width: 0, ease: Power2.easeInOut, onComplete: function onComplete() {
                                        $this.find('.line-hover').removeClass('right');
                                    } });
                            });
                        });

                        app.AnimationsManager.refresh();
                    } else {
                        _self.loading = false;
                        _self.$list.find('.loader-list').remove();

                        if (dapper.lang === 'fr') {
                            _self.$list.prepend('<p class="no-results">Pas de résultat correspondant à votre recherche</p>');
                        } else {
                            _self.$list.prepend('<p class="no-results">No results matching your search</p>');
                        }
                    }
                }, error: function error(jqXHR, textStatus, errorThrown) {}

            });
        }
    }]);

    return AjaxList;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AnimationsManager = function () {
    function AnimationsManager(page) {
        _classCallCheck(this, AnimationsManager);

        var _self = this;

        _self.$page = $(page);

        _self.controller = new ScrollMagic.Controller({
            globalSceneOptions: {
                reverse: false
            }
        });

        _self.controllerParallax = new ScrollMagic.Controller({
            globalSceneOptions: {
                reverse: true
            }
        });

        _self.controller.enabled(false);
        _self.controllerParallax.enabled(false);

        _self.init();
    }

    _createClass(AnimationsManager, [{
        key: 'init',
        value: function init() {

            var _self = this;

            _self.$triggers = _self.$page.find('.js-trigger-anim');
            _self.$hoverImages = _self.$page.find('.hover-move');

            if (_self.$triggers.length > 0) {
                Array.prototype.forEach.call(_self.$triggers, function (el, index) {

                    var $anim_el = $(el).hasClass('stagger') ? $(el).find('.js-anim') : $(el);

                    var anim = $(el).attr('data-anim');

                    // Append blocks for block reveal animations

                    if (anim === 'block-out') $anim_el.append('<div class="anim-block"></div>');

                    var timeline = _self.getTimeline($anim_el, anim);

                    // create scroll magic

                    var scrollMagic = new ScrollMagic.Scene({
                        triggerElement: el,
                        triggerHook: 0.65,
                        duration: 0
                    }).setTween(timeline).addTo(_self.controller);
                });
            }

            _self.$tiggers = $('.js-trigger-parallax');
            if (_self.$tiggers.length > 0) {
                Array.prototype.forEach.call(_self.$tiggers, function ($_el, index) {

                    //let $anim_el = $_el.hasAttribute('data-ratio') ? $($_el) : $($_el).find('[data-ratio]')
                    //let speed = $anim_el.attr('data-speed') ? 1 - $anim_el.attr('data-speed') : 0.3;
                    var timeline = new TimelineMax({});

                    var percent = $($_el).height() * 0.3;
                    timeline.fromTo($_el.style, 1, { transform: "translate3D(0," + percent + "px,0)" }, { transform: "translate3D(0,-" + percent + "px,0)" });

                    var scrollMagic = new ScrollMagic.Scene({
                        triggerElement: $_el,
                        triggerHook: 1,
                        duration: '200%'
                    }).setTween(timeline).addTo(_self.controllerParallax);
                });
            }

            _self.bindEvents();
        }
    }, {
        key: 'refresh',
        value: function refresh() {
            var _self = this;
            _self.$hoverImages = _self.$page.find('.hover-move');
            _self.$hoverImages.off('mousenter');
            _self.bindEvents();
        }
    }, {
        key: 'bindEvents',
        value: function bindEvents() {

            var _self = this;

            _self.$hoverImages.on('mouseenter', function (e) {

                var $this = $(this);

                var firstX = e.pageX - $(this).offset().left,
                    firstY = e.pageY - $(this).offset().top;

                if ($this.hasClass('img-out')) TM.to($(this).find('img'), 0.4, { opacity: 0.5, ease: Power4.easeInOut });

                TM.to($(this).find('img'), 0.5, { scale: 1.02, ease: Power4.Out, onComplete: function onComplete() {
                        _self.moveImage($this, firstX, firstY);
                    } });
            });

            _self.$hoverImages.on('mouseleave', function () {
                $(this).off('mousemove');
                TM.to($(this).find('img'), 0.4, { x: 0, y: 0, scale: 1, opacity: 1, ease: Power4.easeOut });
            });
        }
    }, {
        key: 'moveImage',
        value: function moveImage($element, x, y) {

            var middleX = $element.width() / 2,
                middleY = $element.height() / 2;

            var dirX = x < middleX ? 1 : -1;
            var dirY = y < middleY ? 1 : -1;

            var delta = 0.01;

            $element.on('mousemove', function (e) {
                var posX = e.pageX - $(this).offset().left;
                var posY = e.pageY - $(this).offset().top;

                // let decalX = x < middleX ? posX :  posX - middleX;
                // let decalY = x < middleY ? posY :  posY - middleY;


                var decalX = posX - middleX;
                var decalY = posY - middleY;

                TM.to($(this).find('img'), 0.3, { x: decalX * delta, y: decalY * delta, ease: Power4.easeOut });
            });
        }
    }, {
        key: 'getTimeline',
        value: function getTimeline($el, anim) {

            var timeline = void 0;

            var delay = $el.attr('data-delay') ? $el.attr('data-delay') : 0;

            switch (anim) {

                case 'small-label':
                    timeline = new TimelineMax({ onComplete: function onComplete() {
                            $el.addClass('animated');
                        } });

                    TM.set($el, { y: 10, opacity: 0 });
                    timeline.to($el, 0.6, { y: 0, opacity: 1, ease: Power4.easeOut });
                    break;

                case 'boxes':
                    timeline = new TimelineMax({ onComplete: function onComplete() {} });

                    TM.set($el, { y: 20, opacity: 0 });
                    timeline.staggerTo($el, 1, { y: 0, opacity: 1, ease: Power2.easeOut }, 0.05);
                    break;

                case "full-slideshow":

                    timeline = new TimelineMax();
                    timeline.set($el.find('.title-anim'), { y: 20, opacity: 0 });
                    timeline.set($el.find('.mention-anim'), { y: 20, opacity: 0 });
                    timeline.set($el.find('.elmt-anim'), { x: 100, opacity: 0 });
                    timeline.set($el, { borderLeftWidth: 0 });
                    timeline.set($el.find('.nav-slideshow'), { y: 20, opacity: 0 });

                    timeline.to($el.find('.title-anim'), 0.5, { y: 0, opacity: 1 }, 0);
                    timeline.to($el.find('.mention-anim'), 0.5, { y: 0, opacity: 1 }, 0.2);
                    timeline.to($el, 0.5, { borderLeftWidth: 10 }, 0);
                    timeline.staggerTo($el.find('.elmt-anim'), 1.3, { x: 0, opacity: 1, ease: Power4.easeOut }, 0.5, 0.2);
                    timeline.to($el.find('.nav-slideshow'), 0.5, { y: 0, opacity: 1, ease: Power4.easeOut }, 0.5);

                    break;

                case 'section-border':
                    timeline = new TimelineMax({ onComplete: function onComplete() {} });

                    TM.set($el, { borderWidth: 0 });

                    timeline.to($el, 0.6, { borderWidth: 10, ease: Power4.easeOut });
                    break;

                case 'big-date':
                    timeline = new TimelineMax({ onComplete: function onComplete() {} });

                    TM.set($el.find('p'), { y: 10, opacity: 0 });
                    TM.set($el.find('p:last'), { borderWidth: 0 });

                    timeline.to($el.find('p:last'), 0.6, { borderWidth: 1, ease: Power4.easeOut }, 0);
                    timeline.to($el.find('p'), 0.6, { y: 0, opacity: 1, ease: Power4.easeOut }, 0.3);
                    break;

                case 'title-and-text':
                    timeline = new TimelineMax({ onComplete: function onComplete() {} });

                    TM.set($el.find('.title-anim'), { y: 10, opacity: 0 });
                    TM.set($el.find('.text-anim'), { y: 10, opacity: 0 });

                    // if($el.find('.button-anim').length > 0)
                    TM.set($el.find('.button-anim'), { y: 10, opacity: 0 });

                    timeline.to($el.find('.title-anim'), 0.6, { y: 0, opacity: 1, ease: Power4.easeOut }, 0);
                    timeline.to($el.find('.text-anim'), 0.6, { y: 0, opacity: 1, ease: Power4.easeOut }, 0.2);
                    // if($el.find('.button-anim').length > 0)
                    timeline.to($el.find('.button-anim'), 0.6, { y: 0, opacity: 1, ease: Power4.easeOut }, 0.4);
                    break;

                case 'top-single':

                    timeline = new TimelineMax({ onComplete: function onComplete() {} });

                    TM.set($el.find('.title-anim'), { x: -20, opacity: 0 });
                    TM.set($el.find('.mention-anim'), { x: -20, opacity: 0 });
                    TM.set($el.find('.button-anim'), { x: -20, opacity: 0 });
                    TM.set($el.find('.list-anim').children(), { x: -20, opacity: 0 });

                    timeline.to($el.find('.img-anim .mask'), 0.6, { width: '0', ease: Power4.easeOut }, 0);

                    timeline.to($el.find('.mention-anim'), 0.6, { x: 0, opacity: 1, ease: Power4.easeOut }, 0);
                    timeline.to($el.find('.title-anim'), 0.6, { x: 0, opacity: 1, ease: Power4.easeOut }, 0.2);
                    timeline.staggerTo($el.find('.list-anim').children(), 0.6, { x: 0, opacity: 1, ease: Power4.easeOut }, 0.05, 0.3);
                    timeline.to($el.find('.button-anim'), 0.6, { x: 0, opacity: 1, ease: Power4.easeOut }, 0.4);
                    break;

                case 'block-out':

                    timeline = new TimelineMax({ onComplete: function onComplete() {
                            $el.find('.anim-block').remove();
                        } });

                    timeline.to($el.find('.anim-block'), 1.2, {
                        width: 0,
                        ease: Power2.easeOut
                    });

                    break;

                case 'basic-x':
                    timeline = new TimelineMax({ onComplete: function onComplete() {} });

                    TM.set($el, { x: -20, opacity: 0 });

                    timeline.to($el, 0.8, { x: 0, opacity: 1, ease: Power4.easeOut });
                    break;

                case 'basic-y':
                    timeline = new TimelineMax({ onComplete: function onComplete() {} });

                    TM.set($el, { y: 20, opacity: 0 });

                    timeline.to($el, 0.8, { y: 0, opacity: 1, ease: Power4.easeOut, delay: delay });
                    break;

                case 'basic-stagger-y':
                    timeline = new TimelineMax({ onComplete: function onComplete() {} });

                    TM.set($el, { y: 20, opacity: 0 });
                    timeline.staggerTo($el, 0.6, { y: 0, opacity: 1, ease: Power4.easeOut, delay: delay }, 0.1);
                    break;

                case "top-shop":
                    timeline = new TimelineMax({ onComplete: function onComplete() {} });

                    var textElmts = '.section-mention, .page-title, .desc';

                    timeline.set($el.find('.img-c img'), { scale: 1.05, opacity: 0 });
                    timeline.set($el.find(textElmts), { y: -20, opacity: 0 });
                    timeline.to($el.find('.img-c img'), 0.7, { opacity: 1, scale: 1 }, 0);

                    timeline.staggerTo($el.find(textElmts), 0.5, { opacity: 1, y: 0, onComplete: function onComplete() {
                            $el.find('.intro').addClass('animated');
                        } }, 0.05, 0.6);

                    break;

                case 'top-product':

                    timeline = new TimelineMax({ onComplete: function onComplete() {} });

                    TM.set($el.find('.title-anim'), { x: -20, opacity: 0 });
                    TM.set($el.find('.mention-anim'), { x: -20, opacity: 0 });
                    TM.set($el.find('.button-anim'), { x: -20, opacity: 0 });
                    TM.set($el.find('.options-anim').children(), { x: -20, opacity: 0 });

                    timeline.to($el.find('.slideshow .mask'), 0.6, { width: '0', ease: Power4.easeOut }, 0);

                    timeline.to($el.find('.mention-anim'), 0.6, { x: 0, opacity: 1, ease: Power4.easeOut }, 0);
                    timeline.to($el.find('.title-anim'), 0.6, { x: 0, opacity: 1, ease: Power4.easeOut }, 0.2);
                    timeline.staggerTo($el.find('.options-anim').children(), 0.6, { x: 0, opacity: 1, ease: Power4.easeOut }, 0.05, 0.3);
                    timeline.to($el.find('.button-anim'), 0.6, { x: 0, opacity: 1, ease: Power4.easeOut }, 0.4);
                    break;

            }

            return timeline;
        }
    }, {
        key: 'play',
        value: function play() {
            var _self = this;

            _self.controller.enabled(true);
            _self.controller.update(true);
            _self.controllerParallax.enabled(true);
            _self.controllerParallax.update(true);
        }
    }]);

    return AnimationsManager;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Audioguide = function () {
    function Audioguide(element) {
        _classCallCheck(this, Audioguide);

        var t = this;

        t.$element = element;
        t.$secondes = t.$element.find('.timing');
        t.$controls = t.$element.find('.controls');
        t.currentTime = null;

        t.$playerC = t.$element.find('.player');
        t.$waveplayer = t.$element.find('.waveplayer');
        t.media = t.$waveplayer.attr('data-audio');

        if (window.isIE) t.initIE();else t.initWebAudio();
    }

    _createClass(Audioguide, [{
        key: 'initWebAudio',
        value: function initWebAudio() {

            var t = this;

            // TODO : mettre le loader
            t.createPlayer();
            t.watcherControls();
        }
    }, {
        key: 'initIE',
        value: function initIE() {

            var t = this;

            // change container par audio de base
            t.$playerC.find('.ie-not-supported').remove();
            t.$playerC.append(t.$element.find('.audioguideIE'));
        }
    }, {
        key: 'createPlayer',
        value: function createPlayer() {

            var t = this;

            t.wavesurfer = WaveSurfer.create({
                container: t.$waveplayer[0],
                scrollParent: true,
                barHeight: 1,
                barWidth: 2,
                cursorColor: 'transparent',
                minPxPerSec: 1,
                progressColor: '#9E3D2D',
                waveColor: '#8C8C8C'
            });

            t.wavesurfer.load(t.media);

            t.wavesurfer.on('ready', function () {
                t.updateTiming(0);
            });

            t.watcherPlayer();
        }
    }, {
        key: 'watcherControls',
        value: function watcherControls() {

            var t = this;

            t.$controls.on('click', function () {

                t.wavesurfer.playPause();
            });
        }
    }, {
        key: 'watcherPlayer',
        value: function watcherPlayer() {

            var t = this;

            t.wavesurfer.on('play', function () {

                // timer
                t.currentTime = setInterval(function () {
                    var time = Math.trunc(t.wavesurfer.getCurrentTime());
                    t.updateTiming(time);
                }, 1000);

                // change icone si besoin
                if (t.$controls.hasClass('icon-play')) {

                    // icon
                    t.$controls.animate({
                        opacity: 0
                    }, 500);

                    setTimeout(function () {

                        t.$controls.removeClass('icon-play');
                        t.$controls.addClass('icon-pause');

                        t.$controls.animate({
                            opacity: 1
                        }, 500);
                    }, 500);
                }
            });

            t.wavesurfer.on('pause', function () {

                clearInterval(t.currentTime);

                // change icon si besoin
                if (t.$controls.hasClass('icon-pause')) {

                    // icon
                    t.$controls.animate({
                        opacity: 0
                    }, 500);

                    setTimeout(function () {

                        t.$controls.removeClass('icon-pause');
                        t.$controls.addClass('icon-play');

                        t.$controls.animate({
                            opacity: 1
                        }, 500);
                    }, 500);
                }
            });

            t.wavesurfer.on('seek', function () {

                // update timing
                var time = Math.trunc(t.wavesurfer.getCurrentTime());
                t.updateTiming(time);
            });

            t.wavesurfer.on('finish', function () {

                // reset
                t.updateTiming(0);
                t.wavesurfer.stop();
            });
        }
    }, {
        key: 'updateTiming',
        value: function updateTiming(time) {

            var t = this;

            var minutes = Math.trunc(time / 60);
            var secondes = time - minutes * 60;

            if (minutes < 10) minutes = '0' + minutes;
            if (secondes < 10) secondes = '0' + secondes;

            t.$secondes.html(minutes + ' : ' + secondes);
        }
    }, {
        key: 'destruct',
        value: function destruct() {
            var t = this;

            t.wavesurfer.destroy();
        }
    }]);

    return Audioguide;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ContactForm = function () {
    function ContactForm() {
        _classCallCheck(this, ContactForm);

        var t = this;

        t.$receiverList = $('#receiverList');
        t.$receiverInput = $('#field-receiver');
        t.$receiverName = $('#receiver').find('p');
        t.$newsletterC = $('#c-newsletter');
        t.$submit = $('#contact #submit');
        t.$form = $('#contact form');
        t.$message = $('.message-form');

        t.url = dapper.ajaxurl + '?action=contact_form';

        t.init();
    }

    _createClass(ContactForm, [{
        key: 'init',
        value: function init() {
            var t = this;

            // elements clickable
            $('.clickable').each(function () {
                t.clickAction($(this));
            });

            // watcher submit
            t.$submit.on('click', t.checkRequired.bind(t));
        }
    }, {
        key: 'clickAction',
        value: function clickAction($element) {
            var t = this;

            if ($element.is('#receiver')) $element.on('click', t.openReceiver.bind(t));else if ($element.is('#c-newsletter')) $element.on('click', t.checkNewsletter.bind(t));else if ($element.hasClass('receiver-option')) {

                $element.on('click', function () {
                    var value = $(this).attr('data-receiver');
                    var name = $(this).text();
                    t.selectReceiver(value, name);
                });
            }
        }
    }, {
        key: 'openReceiver',
        value: function openReceiver() {
            var t = this;

            t.$receiverList.addClass('open');
        }
    }, {
        key: 'selectReceiver',
        value: function selectReceiver(value, name) {
            var t = this;

            t.$receiverInput.val(value);
            t.$receiverName.text(name);
            t.$receiverList.toggleClass('open');

            // append dans l'input hidden
            $('#inputReceiver').val(value);
        }
    }, {
        key: 'checkNewsletter',
        value: function checkNewsletter() {
            var t = this;

            // let checkedFlag = t.$newsletterInput.prop('checked')

            // t.$newsletterInput.prop('checked', !checkedFlag)
            t.$newsletterC.toggleClass('selected');

            // append dans l'input

            if (t.$newsletterC.hasClass('selected')) $('#newsletter').val('oui');else $('#newsletter').val('non');
        }
    }, {
        key: 'checkRequired',
        value: function checkRequired() {
            var t = this;
            var flagRequired = true;

            // enleve les class erreur
            $('.required.error').removeClass('error');

            // vérifie que touts les champs obligatoires sont remplis
            $('.required').each(function () {

                // récupère la valeur et enleve les espaces inutile
                var value = $(this).val().trim();

                // si valeur vide
                if (value === '') {

                    // change le flag
                    flagRequired = false;

                    // ajoute la class
                    if ($(this).attr('name') === 'receiver') $(this).siblings('.selected').addClass('error');else $(this).addClass('error');
                }
            });

            // arrete la fonction si un element n'est pas remplis
            if (!flagRequired) {
                t.scrollTop('missing');
                return false;
            }

            t.sendForm();
        }
    }, {
        key: 'sendForm',
        value: function sendForm() {
            var t = this;

            // récupère les valeur
            var values = t.$form.serializeArray();

            // ajout du loader
            t.scrollTop('loader');

            // envoie ajax
            $.ajax({
                url: t.url,
                data: values,
                method: 'POST',
                success: function success() {

                    t.scrollTop('valid');

                    TM.to(t.$form, 0.25, { opacity: 0 });
                    TM.to(t.$form, 0.25, { height: 0, delay: 0.25, onComplete: function onComplete() {
                            t.$form.css('display', 'none');
                        } });
                },
                error: function error(xhr, status, _error) {
                    t.scrollTop('error');
                }
            });
        }
    }, {
        key: 'scrollTop',
        value: function scrollTop(classe) {
            var t = this;

            $('html, body').animate({
                scrollTop: $('#formulaire').offset().top
            }, 500);

            // remove class
            t.$message.removeClass('missing valid error loader').addClass(classe);
        }
    }]);

    return ContactForm;
}();
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CookiesMessage = function () {
    function CookiesMessage() {
        _classCallCheck(this, CookiesMessage);

        var _self = this;

        _self.$popin = $("#cookiesMessage");
        _self.$btAccept = _self.$popin.find("#acceptCookies");

        _self.init();
    }

    _createClass(CookiesMessage, [{
        key: "init",
        value: function init() {

            var _self = this;

            // TODO : à enlever pour tests
            // Cookies.remove('accepted')

            _self.checkCookiesAccepted();
        }
    }, {
        key: "checkCookiesAccepted",
        value: function checkCookiesAccepted() {

            var _self = this;

            if (!Cookies.get('accepted')) {

                _self.$popin.addClass('not-accepted');
                _self.bindEvents();
            }
        }
    }, {
        key: "bindEvents",
        value: function bindEvents() {

            var _self = this;

            _self.$btAccept.on('click', _self.acceptCookie.bind(_self));
        }
    }, {
        key: "acceptCookie",
        value: function acceptCookie() {

            var _self = this;

            Cookies.set('accepted', 'yes', { expires: 30 });
            _self.$popin.removeClass('not-accepted');
        }
    }]);

    return CookiesMessage;
}();
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CutText = function CutText(el) {
    _classCallCheck(this, CutText);

    var _self = this;
    _self.$ = $(el);

    _self.$more = '<div class="more-js"></div>';

    _self.$.append(_self.$more);
};
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Header = function () {
    function Header() {
        _classCallCheck(this, Header);

        var _self = this;
        _self.$ = $('header');
        _self.$burger = _self.$.find('#burger');
        _self.$menu = _self.$.find('#menu');
        _self.$sections = $('main section');
        _self.isShop = $('body').hasClass('woocommerce-page');

        _self.timelineOpen = new TimelineMax({ paused: true, onComplete: function onComplete() {
                _self.animating = false, _self.$.addClass('menu-open');
            } });
        _self.timelineClose = new TimelineMax({ paused: true, onComplete: function onComplete() {
                _self.animating = false;
                _self.$.removeClass('menu-open');
                _self.$menu.hide();
            } });

        _self.timelineHover = new TimelineMax({ paused: true });

        _self.$bts = _self.$menu.find('#main-nav a');
        _self.animating = false;

        _self.$btSearch = $('#bt-search');
        _self.$rightNav = $('header .right-nav');
        _self.leaveMainTimeout = function () {};

        if (_self.$sections.eq(0).hasClass('light-section')) _self.$.addClass('on-light-section');
        if (_self.isShop) $('#menu-shop').show();

        // init search
        _self.initSearch();

        // smallScreen Menu
        _self.$menu.find('#main-nav-mobile .w-sub').each(function () {
            var h = $(this).find('.sub-child-mobile').height();
            $(this).attr('data-height', h);
            $(this).find('.sub-child-mobile').height(0);
        });

        _self.bindEvents();

        _self.init();

        $(window).on('resize', _self.init.bind(_self));
    }

    _createClass(Header, [{
        key: 'init',
        value: function init() {
            var _self = this;

            if (_self.$.hasClass('menu-open') && !_self.animating) _self.close();

            if (!smallScreen) {
                _self.$menu.find('#main-nav-mobile').hide();
            } else {
                _self.$menu.find('#main-nav-mobile').show();
            }

            _self.$menu.hide();
        }
    }, {
        key: 'initSearch',
        value: function initSearch() {
            var _self = this;

            _self.$btSearch.on('click', function () {
                _self.$rightNav.toggleClass('search-open');
            });
        }
    }, {
        key: 'bindEvents',
        value: function bindEvents() {

            var _self = this;

            // Events

            _self.$burger.on('mouseenter', function () {
                if (!_self.animating) {

                    if (_self.$.hasClass('menu-open')) {

                        TM.staggerTo(_self.$burger.find('.close'), 0.2, { width: 0, onComplete: function onComplete() {
                                TM.staggerTo(_self.$burger.find('.close'), 0.2, { width: 25 }, 0.05);
                            } }, 0.05);
                    } else {

                        TM.staggerTo(_self.$burger.find('.bar'), 0.2, { width: 0, onComplete: function onComplete() {
                                TM.staggerTo(_self.$burger.find('.bar'), 0.2, { width: 24 }, 0.05);
                            } }, 0.05);
                    }
                }
            });

            _self.$burger.on('click', function () {
                if (_self.animating) return;
                if (_self.$.hasClass('menu-open')) _self.close();else _self.open();
            });

            _self.$bts.on('mouseenter', 'span', function () {
                _self.$bts.removeClass('hovered');
                var $this = $(this).parent();
                $this.addClass('hovered');

                if ($this.hasClass('w-sub')) _self.showSub($this.attr('data-id'));else {
                    _self.leaveMainTimeout = setTimeout(function () {
                        _self.hideSub();
                    }, 0);
                }
            });

            _self.$menu.on('mouseleave', function () {
                _self.$bts.removeClass('hovered');
                _self.leaveMainTimeout = setTimeout(function () {
                    _self.hideSub();
                }, 300);
            });

            if (_self.isShop) {

                $('#menu-shop').children().on('mouseenter', '.title', function () {

                    var $this = $(this).parent();

                    if (!$this.hasClass('active')) {
                        $('#menu-shop').children().removeClass('active');
                        $this.addClass('active');
                    }
                });

                $('#menu-shop').on('mouseleave', function () {
                    $('#menu-shop').children().removeClass('active');
                });
            }

            _self.$menu.find('#main-nav-mobile .w-sub').on('click', function () {
                if (!$(this).hasClass('open')) {
                    TM.to($(this).find('.sub-child-mobile'), 0.3, { height: $(this).attr('data-height') });
                    $(this).addClass('open');
                } else {
                    $(this).removeClass('open');
                    TM.to($(this).find('.sub-child-mobile'), 0.3, { height: 0 });
                }
            });

            _self.scroll();
        }
    }, {
        key: 'open',
        value: function open() {
            var _self = this;
            _self.animating = true;
            //if(_self.$.hasClass('wishlist-open')) app.Wishlist.close();
            _self.$.find('.logo').addClass('logo-white');
            _self.timelineOpen.set(_self.$menu, { display: 'block' });
            _self.timelineOpen.to(_self.$menu, 0.6, { height: wh }, '-=0.2');

            if (smallScreen) {
                _self.timelineOpen.staggerTo(_self.$menu.find('#main-nav-mobile .main-li'), 0.4, { x: 0, opacity: 1 }, 0.1, '-=0.3');
                _self.timelineOpen.staggerTo(_self.$menu.find('#push-nav-mobile a'), 0.4, { x: 0, opacity: 1 }, 0.1, '-=0.3');
            } else {
                _self.timelineOpen.staggerTo(_self.$menu.find('#main-nav a'), 0.4, { x: 0, opacity: 1 }, 0.1, '-=0.3');
            }

            if (mobileScreen) {
                _self.timelineOpen.to(_self.$menu.find('.search-c'), 0.4, { x: 0, opacity: 1 });
            }

            _self.timelineOpen.staggerTo(_self.$menu.find('#bottom-nav a'), 0.4, { x: 0, opacity: 1 }, 0.1, '-=0.4');

            _self.timelineOpen.staggerTo(_self.$burger.find('.bar'), 0.2, { width: 0 }, 0.05, '-=0.4');
            _self.timelineOpen.staggerTo(_self.$burger.find('.close'), 0.2, { width: 25 }, 0.05, '-=0.2');
            _self.timelineOpen.play();

            $('body').css({ overflow: 'hidden' });
        }
    }, {
        key: 'close',
        value: function close() {
            var _self = this;
            _self.animating = true;
            _self.timelineClose.staggerTo(_self.$menu.find('#bottom-nav a'), 0.2, { x: -20, opacity: 0 }, 0.1);
            _self.timelineClose.staggerTo(_self.$menu.find('#main-nav a'), 0.4, { x: -20, opacity: 0 }, 0.1, '-=0.1');

            if (mobileScreen) {
                // TODO : animation barre de recherche
                _self.timelineClose.to(_self.$menu.find('.search-c'), 0.4, { x: -20, opacity: 0 });
            }

            if (smallScreen) {

                _self.timelineOpen.staggerTo(_self.$menu.find('#main-nav-mobile .main-li'), 0.4, { x: -20, opacity: 0 }, 0.1, '-=0.1');
                _self.timelineOpen.staggerTo(_self.$menu.find('#push-nav-mobile a'), 0.4, { x: -20, opacity: 1 }, 0.1, '-=0.1');
            } else {
                _self.timelineClose.staggerTo(_self.$menu.find('#main-nav a'), 0.4, { x: -20, opacity: 0 }, 0.1, '-=0.1');
            }

            _self.timelineClose.to(_self.$menu, 0.4, { height: 0, onComplete: function onComplete() {
                    _self.$.find('.logo').removeClass('logo-white');
                } }, '-=1.2');

            _self.timelineClose.staggerTo(_self.$burger.find('.close'), 0.2, { width: 0 }, 0.05, '-=0.7');
            _self.timelineClose.staggerTo(_self.$burger.find('.bar'), 0.2, { width: 24 }, 0.05, '-=0.6');
            _self.timelineClose.play();

            $('body').css({ overflow: 'visible' });
        }
    }, {
        key: 'showSub',
        value: function showSub(id) {
            var _self = this;
            _self.$menu.find('.sub-menu').hide();
            var topMain = _self.$menu.find('#main-nav a:first').position().top;

            var topSub = _self.$menu.find('#main-nav a[data-id=' + id + ']').position().top + parseInt(_self.$menu.find('#main-nav a[data-id=' + id + ']').css('marginTop')) - 2;

            var $sub = _self.$menu.find('.sub-menu[data-id=' + id + ']');
            TM.set($sub, { top: topSub });
            $sub.show();
            TM.set($sub.find('li'), { x: -10, opacity: 0 });
            TM.staggerTo($sub.find('li'), 0.2, { x: 0, opacity: 1, delay: 0.3 }, 0.05);
        }
    }, {
        key: 'hideSub',
        value: function hideSub() {
            var _self = this;
            _self.$menu.find('.sub-menu').fadeOut(300);
        }
    }, {
        key: 'scroll',
        value: function scroll() {
            var _self = this;
            var lastScroll = 0;
            $(window).on('scroll', function (e) {
                var st = $(document).scrollTop();

                if (st > 1) {

                    if (!_self.$.hasClass('white')) {
                        _self.$.addClass('white');
                    }
                }

                if (st > 200) {
                    if (!_self.$.hasClass('hide')) {

                        _self.$.addClass('hide');
                        TM.to(_self.$, 0.3, { y: -87 });

                        if (!_self.$.hasClass('white')) {
                            _self.hideTimeOut = setTimeout(function () {
                                _self.$.addClass('white');
                            }, 300);
                        }
                    }

                    if (st < lastScroll) {
                        if (_self.$.hasClass('hide')) {
                            _self.$.removeClass('hide');
                            TM.to(_self.$, 0.3, { y: 0 });
                        }
                    }
                } else {
                    if (_self.$.hasClass('hide')) {
                        _self.$.removeClass('hide');
                        TM.to(_self.$, 0.3, { y: 0 });
                    }
                    clearTimeout(_self.hideTimeOut);

                    if (st === 0) _self.$.removeClass('white');
                }

                lastScroll = st;
            });
        }
    }]);

    return Header;
}();
'use strict';

var Lexidapper = {

    init: function init() {
        var _self = this;
        _self.$container = $('.w-words');
        _self.$ = $('#lexidapper');

        if (_self.$.length > 0) _self.initSearch();

        Object.size = function (obj) {
            var size = 0,
                key = void 0;
            for (key in obj) {
                if (obj.hasOwnProperty(key)) size++;
            }
            return size;
        };
        // Get the size of an object
        var size = Object.size(WORDS);

        _self.$container.each(function () {
            var $this = $(this);

            var _loop = function _loop(i) {

                var textDiv = $this.html();
                var wordToFind = WORDS[i].word;

                // enlève les tags html
                if (wordToFind.indexOf('<') >= 0 || wordToFind.indexOf('>') >= 0) wordToFind = $(WORDS[i].word).text();

                // case non sensitive
                var textLDivLower = textDiv.toLowerCase();
                var wordToFindLower = wordToFind.toLowerCase();

                if (textLDivLower.indexOf(wordToFindLower) > 1) {

                    // récupère le mot no html html
                    var word = wordToFind;
                    var reg = new RegExp(word, 'gi');

                    var txt = textDiv.replace(reg, function (str) {
                        return "<a class='wiki-link' href='" + WORDS[i].link + "'>" + str + "<span class='custom-cursor'></span></a>";
                    });
                    $this.html(txt);
                }
            };

            for (var i = 0; i < size; i++) {
                _loop(i);
            }
        });
    },

    initSearch: function initSearch() {
        var _self = this;
        _self.$searchPart = _self.$.find('#search-words');
        _self.$results = [];
        _self.currentSearchText = '';
        _self.$input = _self.$searchPart.find('input');
        _self.$alphabet = _self.$searchPart.find('.alphabet');
        _self.$resulsList = _self.$searchPart.find('.results');

        _self.$input.on('keyup', function (e) {

            var show = false;
            var key = e.keyCode || e.charCode;
            _self.$resulsList.find('ul').empty();

            setTimeout(function () {

                var val = _self.$input.val(),
                    vallow = val.toLowerCase(),
                    valLength = val.length,
                    found = false;

                _self.currentSearchText = val;

                if (val.length < 1) {
                    _self.$resulsList.find('ul').hide();
                    return;
                } else {
                    _self.$resulsList.find('ul').show();
                }

                if (vallow !== '') {

                    _self.$results = $.grep(WORDS, function (e) {

                        if (e.slug !== 'undefined') {
                            if (vallow === 1) return e.slug.slice(0, 1) === vallow;else return e.slug.indexOf(vallow) > -1;
                        }
                    });

                    _self.showWords(_self.$results);
                }
            }, 0);
        });

        _self.$alphabet.on('click', 'li', function () {

            _self.$input.val('');

            var letter = $(this).text();
            _self.$input.val(letter);

            var vallow = _self.$input.val().toLowerCase();

            _self.$results = $.grep(WORDS, function (e) {
                return e.slug.slice(0, 1) === vallow;
            });

            _self.showWords(_self.$results);
        });
    },

    showWords: function showWords($results) {

        var _self = this;

        _self.$resulsList.find('ul').empty();
        _self.$resulsList.find('ul').show();

        for (var i = 0; i < _self.$results.length; i++) {

            var $li = '<li><span><a href="' + _self.$results[i].link + '">' + _self.$results[i].word + '</a></span></li>';
            _self.$resulsList.find('ul').append($li);
        }
    }

};
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoaderManager = function () {
    function LoaderManager() {
        _classCallCheck(this, LoaderManager);

        var _self = this;
        _self.fisrtPreload = true;

        _self.queue = new createjs.LoadQueue();

        _self.manifest = [];

        _self.queue.on('progress', _self.handlerProgress, this);
        _self.queue.on('complete', _self.handlerComplete, this);
        _self.queue.setMaxConnections(10);
        _self.$loader = $('#main-loader');

        _self.data_anim = {
            wrapper: _self.$loader[0],
            loop: false,
            autoplay: false,
            renderer: 'svg',
            path: dapper.theme + '/assets/bodymovin/loader.json',
            rendererSettings: {
                clearCanvas: true,
                progressiveLoad: false
            }
        };

        _self.svgAnim = bodymovin.loadAnimation(_self.data_anim);

        _self.svgAnim.play();

        /*
        $(document).on(EventManager.ILLUSTRATION_READY, function(){
         });
        */
    }

    _createClass(LoaderManager, [{
        key: 'loadAllImages',
        value: function loadAllImages(_images, complete) {

            var _self = this;
            _self.manifest = [];

            // console.log('FONCTION :: LOADALLIMAGES')

            if (typeof complete === 'undefined') complete = function complete() {};

            $.each(_images, function (index, value) {
                if ($(value).attr('src') !== '' && !$(value).hasClass('loaded')) {
                    _self.manifest.push({
                        id: 'img' + index,
                        src: $(value).attr('src'),
                        targetElement: value,
                        fileType: 'image'
                    });
                }
            });

            if (_self.manifest.length > 0) {
                _self.queue.loadManifest(_self.manifest);
            } else {

                $.event.trigger(EventManager.IMGS_PRELOADED);
                _self.handlerComplete();
                complete();
            }

            if (complete) _self.queue.on('complete', complete);
        }
    }, {
        key: 'handlerProgress',
        value: function handlerProgress(e) {
            var _self = this;
            var _v = e.loaded / e.total * 100;
            // TM.to( _self.$loader.find('.progress'),0.1,{height:_v + '%', ease:Power2.easeInOut, overwrite: 3});
        }
    }, {
        key: 'handlerComplete',
        value: function handlerComplete(e) {
            var _self = this;
            if (_self.fisrtPreload) _self.$loader.fadeOut(600);

            _self.fisrtPreload = false;
            $.event.trigger(EventManager.IMGS_PRELOADED);
        }
    }]);

    return LoaderManager;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Newsletter = function () {
    function Newsletter(el) {
        _classCallCheck(this, Newsletter);

        var _self = this;
        _self.$el = $(el);
        _self.$input = _self.$el.find('input');
        _self.$bt = _self.$el.find('.bt-submit');
        _self.error = false;
        _self.url = dapper.ajaxurl + '?action=add_suscriber';

        _self.$checbox = _self.$el.find('.icon');

        _self.$checboxContainer = _self.$el.find('.c-newsletter-verify');

        //console.log('_self.$el', _self.$el)

        _self.init();
    }

    _createClass(Newsletter, [{
        key: 'init',
        value: function init() {
            var _self = this;

            _self.$bt.on('click', function () {
                //console.log('in submit')
                _self.submit();
            });

            _self.$checbox.on('click', function () {
                $(this).toggleClass('selected');
            });
        }
    }, {
        key: 'submit',
        value: function submit() {
            var _self = this;

            var email = _self.$input.val();

            // check si newsletter validée
            if (!_self.$checbox.hasClass('selected')) {
                _self.$checboxContainer.addClass('error');
                return null;
            }

            if (email === '' || !_self.validateEmail(email)) {
                _self.error = true;
                _self.$input.val('');
                _self.$input.attr("placeholder", "Veuillez entrer une adresse valide");
            } else {
                _self.error = false;
                $.ajax({
                    url: _self.url + '&email=' + email,
                    type: "GET",
                    success: function success(data, _success, jqXHR) {
                        _self.$input.val('');
                        _self.$input.attr("placeholder", "Merci vous êtes bien inscrit(e)");

                        _self.$checboxContainer.removeClass('error');
                        _self.$checbox.removeClass('selected');
                    }

                });
            }
        }
    }, {
        key: 'validateEmail',
        value: function validateEmail(email) {
            var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return re.test(email);
        }
    }]);

    return Newsletter;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PageView = function () {
    function PageView() {
        _classCallCheck(this, PageView);

        var _self = this;
        _self.$ = $('main');

        _self.page = _self.$.attr('id');
        _self.typePage = _self.$.attr('data-page');
        _self.init();
    }

    _createClass(PageView, [{
        key: 'init',
        value: function init() {

            var _self = this;

            // ------------------ ANIMATIONS ---------------------------------

            app.AnimationsManager = new AnimationsManager(_self.$);

            // app.SmoothScroll = new SmoothScroll()


            // ----------------- FONCTIONNALS --------------------------------------------------------------------


            //LINKS
            $(document).on('click', '.box-link', function (e) {
                var link = $(this).find('a').attr('href');

                if ($(this).hasClass('box-wishlist') && $(e.target).is('.icon-close') || $(e.target).parent().is('.remove-item')) return;

                e.preventDefault();

                if ($(this).find('a').attr('target') === '_blank') window.open(link, '_blank');else {
                    $('#wrapper').fadeOut(300);
                    document.location = link;
                }
            });

            $(document).on("click", "a[href^='" + dapper.url + "']:not(a[href*='wp-content/uploads']):not(a[href*='feed']):not(a[href*='wp-admin']):not(a[target='_blank']):not('.remove'):not('.restore-item')", function (e) {
                //e.preventDefault();
                $('#wrapper').fadeOut(300);
            });

            // AJAX LIST
            if ($('.ajax-paged-list').length > 0) {
                $('.ajax-paged-list').each(function () {
                    new AjaxList($(this).parents('.ajax-part'));
                });
            };

            // SELECTORS AND FILTERS
            $('.selector').each(function () {
                new Selector(this);
            });

            $('.cut-text').each(function () {
                new CutText(this);
            });

            // selector artwork tampon

            if ($('#archives-artworks').length > 0 || $('#single-artwork').length > 0) {
                var name = $('#archives-artworks').length > 0 ? 'archives-artworks' : 'single-artwork';
                new PresetArtworkNav(name);
            }

            // SCROLL COVER
            if (_self.$.hasClass('tpl-content-page')) _self.scrollCover();

            //SEARCH BUTTON

            $('#searchinput').val('');
            $('#searchsubmit').addClass('disabled');
            $('#searchinput').on('keyup', function () {

                if ($('#searchinput').val().length > 0) {
                    $('#searchsubmit').removeClass('disabled');
                } else {
                    $('#searchsubmit').addClass('disabled');
                }
            });

            //INTERNAV

            if (_self.$.hasClass('w-intern-nav')) _self.interNav();

            // FB SHARE
            window.fbAsyncInit = function () {
                FB.init({
                    appId: '579513955723141',
                    xfbml: true,
                    version: 'v2.11'
                });
                FB.AppEvents.logPageView();
            };

            (function (d, s, id) {
                var js,
                    fjs = d.getElementsByTagName(s)[0];
                if (d.getElementById(id)) {
                    return;
                }
                js = d.createElement(s);js.id = id;
                js.src = "https://connect.facebook.net/en_US/sdk.js";
                fjs.parentNode.insertBefore(js, fjs);
            })(document, 'script', 'facebook-jssdk');

            // SHARE

            $('.open-share').each(function () {
                _self.shareButtons($(this));
            });

            app.Slideshows = [];

            // SLIDESHOWS
            $('.slideshow').each(function () {

                if (this.getAttribute('data-type') === 'slideshow-double') {
                    var sl = new SlideshowDouble(this);
                    app.Slideshows.push(sl);
                } else if (this.getAttribute('data-type') === 'slideshow-home') {
                    var _sl = new SlideshowHome(this);
                    app.Slideshows.push(_sl);
                } else {
                    var _sl2 = new Slideshow(this);
                    app.Slideshows.push(_sl2);
                }
            });

            // LEXIDAPPER SLIDESHOW
            if ($('#lexidapper-slideshow').length > 0) new SlideshowLexidapper();

            // BOX AUDIO
            if ($('.box-audio').length > 0) {
                $('.box-audio').each(function () {
                    new Audioguide($(this));
                });
            }

            // POPIN
            $('.open-popin').each(function () {
                new Popin(this);
            });

            // TODO : charline à ranger si besoin

            // HOME PUSH POUR MOBILES
            if (window.isMobileTablet && $('.home-push').length) {
                $('.home-push').addClass('hover');
            }

            // RECHERCHE FOOTER
            $('footer #searchSubmitFooter').on('click', function () {
                $('footer #formSearchMobileFooter').submit();
            });

            // RECHERCHE HEADER
            $('header #searchSubmitHeader').on('click', function () {
                $('header #formSearchMobileHeader').submit();
            });

            // ----------------- VISUALS -------------------------------------------------------------------------


            // BORDER HOVER

            $('.border-hover').each(function () {
                var $this = $(this);
                $this.append('<div class="line-hover"></div>');

                var w = $this.attr('data-hover') !== undefined ? $this.attr('data-hover') + '%' : $this.find('.line-hover').siblings('.col-70').outerWidth() + 'px';

                // set un resize uniquement pour les valeur en px
                if ($this.attr('data-hover') === undefined) {

                    $window.on('resize', function () {
                        w = $this.attr('data-hover') !== undefined ? $this.attr('data-hover') + '%' : $this.find('.line-hover').siblings('.col-70').outerWidth() + 'px';
                    });
                }

                $this.on('mouseenter', function (e) {

                    if ($this.hasClass('box-wishlist') && $(e.target).is('.icon-close') || $(e.target).parent().is('.remove-item')) return;

                    TM.to($this.find('.line-hover'), 0.6, { width: w, ease: Power2.easeInOut, onComplete: function onComplete() {
                            $this.find('.line-hover').addClass('right');
                        } });
                });

                $this.on('mouseleave', function () {
                    TM.to($this.find('.line-hover'), 0.4, { width: 0, ease: Power2.easeInOut, onComplete: function onComplete() {
                            $this.find('.line-hover').removeClass('right');
                        } });
                });
            });

            // MORE TEXT HIDDING

            $('.vla-cut-text').each(function () {
                _self.hideMoreText($(this));
            });

            // MORE TEXT HIDDING

            _self.sizes();
            $(window).on('resize', _self.sizes.bind(_self));

            _self.show();
        }
    }, {
        key: 'sizes',
        value: function sizes() {
            var _self = this;

            if ($('#single-event').length > 0) {

                var $topEvent = $('#top-event');

                if (smallScreen) {

                    $topEvent.addClass('mobile-version');
                    var $date = $topEvent.find('.big-date');
                    $topEvent.find('.text-part').append($date);
                } else {

                    if ($topEvent.hasClass('mobile-version')) {
                        var _$date = $topEvent.find('.text-part .big-date');
                        $topEvent.append(_$date);
                        $topEvent.removeClass('mobile-version');
                    }
                }
            }
        }
    }, {
        key: 'scrollCover',
        value: function scrollCover() {

            var _self = this;

            _self.setSizeCover();

            var hPage = _self.$.find('.content-page').height(),
                hCover = _self.$.find('.cover').height(),
                $cover = _self.$.find('#fixed-background .darkred-cover'),
                $bg = _self.$.find('#fixed-background .img-c'),
                opacity = $bg.css('opacity');

            $(window).on('scroll', function (e) {
                var st = $(document).scrollTop();

                if (st > hCover && hPage > wh) {
                    var delta = (st - hCover) / (hPage - wh) * opacity;
                    TM.set($bg, { opacity: opacity - delta });
                } else {
                    TM.set($bg, { opacity: opacity });
                }
            });
        }
    }, {
        key: 'setSizeCover',
        value: function setSizeCover() {
            var _self = this;

            var ww = window.innerWidth;
            var wh = window.innerHeight;

            var $bg = _self.$.find('#fixed-background .img-c img');

            var ratioBg = null;

            // paysage
            if (ww > wh) {

                ratioBg = $bg.innerWidth() / $bg.innerHeight();

                $bg.css('width', window.innerWidth);
                $bg.css('height', window.innerWidth / ratioBg);
            }

            // portrait
            else {

                    ratioBg = $bg.innerHeight() / $bg.innerWidth();

                    $bg.css('height', '640px');
                    $bg.css('width', 640 / ratioBg);
                }
        }
    }, {
        key: 'interNav',
        value: function interNav() {

            var _self = this;

            var $nav = _self.$.find('#inter-nav'),
                $bts = $nav.find('li'),
                tabOffset = [],
                $section = _self.$.find('.content-page section'),
                limit = _self.$.find('.content-page').offset().top,
                footerOffset = $('footer').offset().top - wh * 0.6,
                scrolling = false;

            $section.each(function () {
                tabOffset.push({ offset: $(this).offset().top });
            });

            $bts.on('click', function () {
                $bts.removeClass('active');
                $(this).addClass('active');
                scrolling = true;
                var $anch = $('#' + $(this).attr('data-anchor'));
                TM.to($('html,body'), 0.8, { scrollTop: $anch.offset().top - 100, onComplete: function onComplete() {
                        scrolling = false;
                    } });
            });

            $(window).on('scroll', function (e) {
                var st = $(document).scrollTop();

                if (st > limit && st < footerOffset) {
                    $nav.addClass('fixed');
                } else {
                    $nav.removeClass('fixed');
                }

                for (var i = 0; i < tabOffset.length; i++) {

                    if (st > tabOffset[i].offset && !$bts.eq(i).hasClass('active') && !scrolling) {
                        $bts.removeClass('active');
                        $bts.eq(i).addClass('active');
                    }
                }
            });
        }
    }, {
        key: 'shareButtons',
        value: function shareButtons($buttons) {

            var _self = this;

            $buttons.on('click', '.icon', function () {
                $buttons.toggleClass('open');
            });

            $buttons.find('.button-share').on('click', function () {

                var link = $(this).parent().attr('data-link');
                var title = $(this).parent().attr('data-title');
                var image = $(this).parent().attr('data-img');
                var description = $(this).parent().attr('data-desc');

                if ($(this).hasClass('facebook')) {
                    FB.ui({
                        method: 'share',
                        action_type: 'og.shares',
                        display: 'popup',
                        action_properties: JSON.stringify({
                            object: {
                                'og:url': link,
                                'og:title': title,
                                'og:image': image,
                                'og:description': description
                            }
                        })
                    }, function (response) {});
                } else if ($(this).hasClass('twitter')) {
                    var width = 575,
                        height = 400,
                        left = ($(window).width() - width) / 2,
                        top = ($(window).height() - height) / 2,
                        url = 'https://twitter.com/intent/tweet?url=' + link + '&text=' + title + ' ',
                        opts = 'status=1' + ',width=' + width + ',height=' + height + ',top=' + top + ',left=' + left;

                    window.open(url, 'twitter', opts);
                }
            });
        }
    }, {
        key: 'hideMoreText',
        value: function hideMoreText($element) {
            var _self = this;

            var content = $element.html();

            if (content.indexOf('<!--more-->') > -1) {

                var limit = content.indexOf('<!--more-->');

                var c = content.substr(0, limit);

                var h = content.substr(limit, content.length - limit);

                var html = c + '<span class="more-text"><span class="icon-more"></span>Lire la suite</span>' + '<div class="cutted-text">' + h + '<div>';
                $element.html(html);

                var $cuttedText = $element.find('.cutted-text');
                var $more = $element.find('.more-text');

                $cuttedText.hide();

                $more.on('click', function () {

                    $cuttedText.show();
                    $more.hide();
                });
            }
        }
    }, {
        key: 'show',
        value: function show() {
            var _self = this;

            if (_self.page === 'contact') new ContactForm();

            if (_self.page === 'single-product') new Product();

            TM.to($('#wrapper'), 0.6, { opacity: 1, ease: Power2.easeInOut, onComplete: function onComplete() {

                    Array.prototype.forEach.call(app.Slideshows, function (slideshow, index) {
                        slideshow.show();
                    });

                    setTimeout(function () {
                        app.AnimationsManager.play();
                    }, 0);
                } });
        }
    }]);

    return PageView;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Popin = function () {
    function Popin(el) {
        _classCallCheck(this, Popin);

        var _self = this;
        _self.$ = $(el);
        _self.multiple = _self.$.hasClass('multiple-popin');
        _self.index = 0;
        _self.active = false;
        _self.nextIndex = 0;
        _self.$childs = null;
        _self.$popin = $('#popin');
        _self.$overlay = $('#overlay');
        _self.$close = _self.$popin.find('.close');
        _self.type = _self.$.attr('data-popin');
        _self.$container = null;
        _self.tabData = [];
        _self.wSet = 0;
        _self.wImg = 0.7;

        if (_self.multiple) {
            _self.$childs = _self.$.find('.popin-child');
        }

        _self.bindEvents();
    }

    _createClass(Popin, [{
        key: 'bindEvents',
        value: function bindEvents() {

            var _self = this;

            if (_self.multiple) {

                _self.$childs.on('click', '', function () {
                    _self.index = $(this).index();
                    _self.nextIndex = $(this).index();

                    _self.openPopin();
                    _self.createContent($(this));
                });

                _self.$popin.find('.button-nav').on('click', function () {

                    if ($(this).hasClass('next')) _self.slide(1);else if ($(this).hasClass('prev')) _self.slide(-1);
                });
            } else {

                _self.$.on('click', '', function () {
                    _self.openPopin();
                    _self.createContent(_self.$);
                });
            }

            _self.$close.on('click', function () {
                _self.closePopin();
            });
        }
    }, {
        key: 'openPopin',
        value: function openPopin() {

            var _self = this;

            _self.$overlay.fadeIn(300);

            _self.active = true;

            // Popin
            _self.$popin.fadeIn(300);

            _self.$container = _self.$popin.find('#popin-' + _self.type);

            if (!_self.multiple) {
                _self.$popin.find('.nav-slideshow').hide();
                _self.$popin.find('.number').hide();
            } else {

                if (_self.$childs.length > 1) {
                    _self.$popin.find('.nav-slideshow').show();
                    _self.$popin.find('.number').show();
                    var total = _self.$childs.length < 10 ? '0' + _self.$childs.length : _self.$childs.length;
                    _self.$popin.find('.number .total').text(total);
                } else {
                    _self.$popin.find('.nav-slideshow').hide();
                    _self.$popin.find('.number').hide();
                }
            }

            $('body').css({ overflow: 'hidden' });
        }
    }, {
        key: 'createContent',
        value: function createContent($content) {

            var _self = this;

            // IMAGE
            if (_self.type === 'image' || _self.type === 'image-audio') {

                // WOOCOMMERCE
                if ($content.hasClass('woocommerce-product-gallery__image')) $content = $content.find('img');

                // BOX RESOURCE
                if ($content.hasClass('box-resource')) $content = $content.find('.img-c');

                _self.tabData = {
                    src: $content.attr('data-image'),
                    height: parseFloat($content.attr('data-height')),
                    width: parseFloat($content.attr('data-width')),
                    title: $content.attr('data-title'),
                    caption: $content.attr('data-caption'),
                    description: $content.attr('data-description'),
                    link: $content.attr('data-link'),
                    audio: _self.$.find('.audio-content').clone()
                };

                _self.$container.find('img').attr('src', _self.tabData.src);
                _self.$container.find('.title').html(_self.tabData.title);
                _self.$container.find('.caption').html(_self.tabData.caption);
                _self.$container.find('.description').html(_self.tabData.description);

                if (_self.tabData.link === "") {
                    _self.$container.find('.link').addClass('no-active');
                } else {
                    _self.$container.find('.link a').attr("href", _self.tabData.link);
                }

                if (_self.tabData.height < _self.tabData.width) {
                    _self.$container.addClass('paysage');
                    _self.$container.removeClass('portrait');
                    _self.sizing();
                    _self.moveImg();
                } else {
                    _self.$container.removeClass('paysage');
                    _self.$container.addClass('portrait');
                }

                if (_self.type === 'image-audio') {

                    _self.$container.find('.audio').html(_self.tabData.audio);
                    _self.$container.find('.audio').addClass('box-audio');

                    // appelle class
                    _self.$popin.find('.box-audio').each(function () {
                        _self.audioGuide = new Audioguide($(this));
                        // _self.$close.on('click',function(){
                        //     console.log('click')
                        //     console.log(_self.audioGuide)
                        // });
                    });
                }
            }

            // VIDEO
            else if (_self.type === 'video') {

                    _self.tabData = {
                        video: $content.find('.video-c iframe').clone(),
                        title: $content.find('.title').text()
                    };

                    _self.$container.find('.video').html(_self.tabData.video);
                    _self.$container.find('.title').html(_self.tabData.title);
                }

                // AUDIO


                else if (_self.type === 'audio') {

                        // modifie en dessous avec le clone
                        _self.tabData = {
                            audio: _self.$.find('.audio-content').clone(),
                            title: $content.find('.infos .title').text()
                        };

                        _self.$container.find('.audio').html(_self.tabData.audio);
                        _self.$container.find('.audio').addClass('box-audio');
                        _self.$container.find('.title').html(_self.tabData.title);

                        // appelle class
                        _self.$popin.find('.box-audio').each(function () {
                            _self.audioGuide = new Audioguide($(this));

                            // _self.$close.on('click',function(){
                            //     console.log('click')
                            //     _self.audioGuide.playPause();
                            // });
                        });
                    }

            _self.showContent();
        }
    }, {
        key: 'showContent',
        value: function showContent() {

            var _self = this;

            _self.index = _self.nextIndex;

            var indexText = _self.index < 10 ? '0' + (_self.index + 1) : _self.index + 1;

            _self.$popin.find('.current').text(indexText);

            _self.$container.fadeIn(300);
        }
    }, {
        key: 'slide',
        value: function slide(dir) {

            var _self = this;

            if (!_self.active) return;

            if (dir === 1) _self.nextIndex = _self.index < _self.$childs.length - 1 ? _self.index + 1 : 0;else _self.nextIndex = _self.index !== 0 ? _self.index - 1 : _self.$childs.length - 1;

            _self.$popin.find('.popin-c').fadeOut(0);

            //console.log(_self.type);

            //console.log( _self.$container);

            _self.createContent(_self.$childs.eq(_self.nextIndex));
        }
    }, {
        key: 'sizing',
        value: function sizing() {

            var _self = this;

            var delta = _self.tabData.width / _self.tabData.height;
            _self.wSet = wh * delta;
            TM.set(_self.$popin.find('.paysage img'), { x: (ww * _self.wImg - _self.wSet) / 2 });
        }
    }, {
        key: 'moveImg',
        value: function moveImg() {

            var _self = this;

            var middle = _self.wImg * ww / 2;

            _self.$popin.find('.paysage .img-part').on('mousemove', function (e) {

                var posY = e.pageX / (middle / 100) * 0.01;
                var decal = (ww * _self.wImg - _self.wSet) / 2 * posY;
                TM.to(_self.$popin.find('.paysage img'), 0.3, { x: decal });
            });

            _self.$popin.find('.paysage .img-part').on('mouseleave', function (e) {
                TM.to(_self.$popin.find('.paysage img'), 0.3, { x: (ww * _self.wImg - _self.wSet) / 2 });
            });
        }
    }, {
        key: 'closePopin',
        value: function closePopin() {
            var _self = this;
            _self.$container = _self.$popin.find('#popin-' + _self.type);

            _self.$overlay.fadeOut(300);
            _self.tabData = [];
            _self.$container.find('.element').empty();
            _self.$container.fadeOut(300);

            _self.active = false;
            _self.index = 0;
            _self.nextIndex = 0;
            _self.$container = null;

            // Popin
            _self.$popin.fadeOut(300);

            if (_self.audioGuide) _self.audioGuide.destruct();
            // audio
            // if ( _self.type === 'image-audio' || _self.type === 'audio') _self.audioGuide.playPause()


            $('body').css({ overflow: 'visible' });
        }
    }]);

    return Popin;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PresetArtworkNav = function () {
    function PresetArtworkNav(pageName) {
        _classCallCheck(this, PresetArtworkNav);

        // console.log(pageName);

        var _self = this;

        _self.cookiesName = ['people', 'type-art', 'country'];
        _self.pageName = pageName;
        _self.url = dapper.ajaxurl + '?action=get_artwork_from_cookies';

        _self.$prev = $('.top-part #artworkPrev');
        _self.$next = $('.top-part #artworkNext');

        _self.init();
    }

    _createClass(PresetArtworkNav, [{
        key: 'init',
        value: function init() {
            var _self = this;

            _self.bindEvents();

            if (_self.pageName === 'archives-artworks') _self.resetCookies();
            if (_self.pageName === 'single-artwork') _self.checkCookies();
        }
    }, {
        key: 'bindEvents',
        value: function bindEvents() {
            var _self = this;

            $('[data-people]').on('click', function () {
                var id = $(this).attr('data-people');
                Cookies.set('people', id);
            });

            $('[data-country]').on('click', function () {
                var id = $(this).attr('data-country');
                Cookies.set('country', id);
            });

            $('[data-type]').on('click', function () {
                var id = $(this).attr('data-type');
                Cookies.set('type-art', id);
            });
        }
    }, {
        key: 'checkCookies',
        value: function checkCookies() {
            var _self = this;

            // reset les filtres
            _self.filters = {};

            // ajoutes les cookies
            _self.cookiesName.forEach(function (name) {
                return _self.filters[name] = Cookies.get(name);
            });

            // ajoute le current dans les cookies
            var currentArtwork = $('#' + _self.pageName).attr('data-current-artwork');
            _self.filters['current-artwork'] = currentArtwork;

            // récupère les artwork en lien
            _self.getArtwork();
        }
    }, {
        key: 'resetCookies',
        value: function resetCookies() {
            var _self = this;

            _self.cookiesName.forEach(function (name) {
                return Cookies.set(name, "");
            });
        }
    }, {
        key: 'getArtwork',
        value: function getArtwork() {
            var _self = this;

            $.ajax({
                url: _self.url,
                type: 'POST',
                data: _self.filters,
                success: function success(response) {

                    var data = JSON.parse(response);

                    _self.$prev.attr('href', data['prev']);
                    _self.$next.attr('href', data['next']);
                },
                error: function error(status, err) {
                    // console.log(status)
                    // console.log(err)
                }
            });
        }
    }]);

    return PresetArtworkNav;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Product = function () {
    function Product() {
        _classCallCheck(this, Product);

        var _self = this;
        _self.$ = $('#single-product');
        _self.$addToCart = _self.$.find('.single_add_to_cart_button');
        _self.$customaddToCart = _self.$.find('#custom-add-to-cart');
        _self.$counter = _self.$.find('form.cart .qty');
        _self.$counterCustom = _self.$.find('#custom-counter');
        _self.count = _self.$counter.val();
        _self.stock = 10;

        _self.isVarations = $('.variations_form').length > 0;
        if (!_self.isVarations) _self.$.addClass('no-variations');

        _self.productDonationFree = _self.$.find('.free').length > 0;

        if (_self.productDonationFree) _self.$inputNameYourPrice = _self.$.find('#ywcnp_suggest_price_single');

        _self.init();
    }

    _createClass(Product, [{
        key: 'init',
        value: function init() {
            var _self = this;

            _self.$counterCustom.find('span').text('0' + _self.count);

            _self.$addToCart.css({ height: 0, overflow: 'hidden' });

            if (_self.$.find('.custom-options .price').text() === "") {
                _self.$customaddToCart.addClass('disabled');
            }

            if (_self.$.find('.summary .stock').length > 0) {
                _self.stock = _self.$counter.attr('max');
            }

            //console.log('stock :' + _self.stock);


            if (_self.$.find('.summary .out-of-stock').length > 0) {
                _self.$customaddToCart.addClass('disabled');
                _self.$.find('.summary .out-of-stock').text();
                _self.$.find('.summary .out-of-stock').text('Indisponible');
            }

            if (_self.$counter.attr('type') === 'hidden') _self.$counterCustom.hide();

            _self.$customaddToCart.on('click', function () {
                if (!$(this).hasClass('disabled')) ;
                _self.$addToCart.trigger('click');
            });

            _self.$counterCustom.on('click', '.bt', function () {

                var newCount = "";

                if ($(this).hasClass('more') && _self.count < _self.stock) {

                    _self.count++;
                    newCount = _self.count < 10 ? '0' + _self.count : _self.count;
                } else if ($(this).hasClass('less') && _self.count !== 1) {

                    _self.count--;
                    newCount = _self.count < 10 ? '0' + _self.count : _self.count;
                } else {
                    return;
                }
                _self.$counterCustom.find('span').text(newCount);
                _self.$counter.val(_self.count);
            });

            if (_self.isVarations) {

                _self.$.addClass('w-variations');

                _self.$customaddToCart.addClass('disabled');

                var $selector = _self.$.find('.summary .selector');
                var $varations = _self.$.find('.summary .variations_form table tbody tr:first');

                $selector.find('span').text($varations.find('.label label').text());
                $varations.find('.value select option').eq(0).remove();

                $varations.find('.value select option').each(function () {
                    $selector.find('ul').append('<li data-value="' + $(this).val() + '">' + $(this).text() + '</li>');
                });

                $selector.find('li').on('click', function () {

                    if (!_self.$.hasClass('variated')) _self.$.addClass('variated');

                    _self.$customaddToCart.removeClass('disabled');

                    var val = $(this).attr('data-value');

                    $varations.find('.value select').val(val);
                    $varations.find('.value select').trigger('change');

                    var price = _self.$.find('.summary .variations_form .woocommerce-variation-price .woocommerce-Price-amount').html();
                    _self.$.find('.summary .custom-options .price').html(price);
                });
            }

            // pour les products watcher
            if (_self.productDonationFree) {

                //console.log('in self donation')

                _self.checkPrice();

                _self.$inputNameYourPrice.attr('placeholder', '100');

                _self.$inputNameYourPrice.attr('type', 'number');

                _self.$inputNameYourPrice.on('focusout', _self.checkPrice.bind(_self));
                _self.$inputNameYourPrice.on('mouseup', _self.checkPrice.bind(_self));
            }
        }
    }, {
        key: 'checkPrice',
        value: function checkPrice() {
            var _self = this;

            var valueEntered = Number(_self.$inputNameYourPrice.val().trim());

            //console.log('value', valueEntered)

            if (Number.isInteger(valueEntered) && valueEntered >= 1) _self.$customaddToCart.removeClass('disabled');else _self.$customaddToCart.addClass('disabled');
        }
    }]);

    return Product;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Selector = function () {
    function Selector(el) {
        _classCallCheck(this, Selector);

        var t = this;
        t.$ = $(el);
        t.$ul = t.$.find('ul');
        t.$selected = t.$.find('.selected');
        t.maxHeight = 0;
        t.isMulti = t.$.hasClass('multi-selector');
        t.count = 0;

        for (var i = 0; i < 6; i++) {
            t.maxHeight = t.maxHeight + t.$ul.find('li').eq(i).outerHeight();
        }

        t.init();
    }

    _createClass(Selector, [{
        key: 'init',
        value: function init() {
            var t = this;

            // SIZES


            if (t.$ul.outerHeight() > t.maxHeight) {

                t.$ul.vlScrollBar({
                    height: t.maxHeight,
                    width: '100%',
                    scrollBarCss: { opacity: 1 },
                    scrollHandleCss: { opacity: 1 },
                    scrollBarVisible: true
                });

                t.$ul.find('.vl-scroll-container').width('100%');
                t.$ul.find('.vl-scroll-content').width('100%');
                t.$ul.addClass('w-scrollbar');
            }

            t.$ul.hide();

            // EVENTS

            t.$selected.on('click', function () {
                if (t.$.is('.open')) t.closeSelector();else {

                    t.openSelector();
                    var $element = t.$ul.find('.vl-scroll-container');
                    $element.scroll();
                }
            });

            t.$ul.on('click', 'li', function () {

                t.ClickLi($(this));
                t.closeSelector();
            });

            $('body').on('click', function (e) {
                var $t = $(e.target);
                if (!$t.hasClass('selector') && !$t.parents('.selector').length) {
                    t.closeALlSelectors();
                }
            });
        }
    }, {
        key: 'openSelector',
        value: function openSelector() {
            var t = this;
            t.closeALlSelectors();
            t.$.addClass('open');
            t.$ul.show();
            TM.fromTo(t.$ul, 0.3, { opacity: 0, top: 86 }, { opacity: 1, top: 70 });
        }
    }, {
        key: 'closeSelector',
        value: function closeSelector() {

            var t = this;
            TM.to(t.$ul, 0.3, { opacity: 0, top: 86, onComplete: function onComplete() {
                    t.$.removeClass('open');
                    t.$ul.hide();
                } });
        }
    }, {
        key: 'closeALlSelectors',
        value: function closeALlSelectors() {
            var t = this;
            var $selectors = $('.selector').filter('.open');

            TM.to($selectors.find('ul'), 0.3, { opacity: 0, top: 86, onComplete: function onComplete() {
                    $selectors.find('ul').hide();
                    $selectors.removeClass('open');
                } });
        }
    }, {
        key: 'ClickLi',
        value: function ClickLi($li) {
            var t = this;
            var values = [];

            // MULTI SELECTOR

            if (t.isMulti) {
                $li.toggleClass('selected');

                var $actives = t.$ul.find('li').filter('.selected');

                $actives.each(function () {
                    var value = $(this).attr('data-value');
                    values.push(value);
                });

                t.count = values.length;
                t.$selected.attr('data-value', values);
                t.$selected.find('b').text(values.length);

                if (t.count > 0) t.$selected.find('b').addClass('visible');else t.$selected.find('b').removeClass('visible');
            } else {
                t.$selected.attr('data-value', '');
                t.$selected.find('span').text($li.text());
                t.$selected.attr('data-value', $li.attr('data-value'));
            }
        }
    }]);

    return Selector;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Slideshow = function () {
    function Slideshow(slideshow) {
        _classCallCheck(this, Slideshow);

        var _self = this;
        _self.$ = $(slideshow);
        _self.type = _self.$.attr('data-type');
        _self.$buttons = _self.$.find('.button-nav');
        _self.$slider = _self.$.find('.slider');
        _self.$slides = _self.$slider.children();
        _self.nbSlides = _self.$slides.length;
        _self.currentIndex = 0;
        _self.$currentSlide = _self.$slides.eq(_self.currentIndex);
        _self.timeline = new TimelineMax({ paused: true });
        _self.direction = null;
        _self.animating = false;
        _self.init();
        _self.sizes();
        $(window).on('resize', _self.sizes.bind(_self));
        _self.bindEvents();

        _self.$number = $('.nav-slideshow #current');
    }

    _createClass(Slideshow, [{
        key: 'init',
        value: function init() {
            var _self = this;

            if (_self.type === 'classic') {

                if (smallScreen && _self.$.is('#linked-products-slideshow')) {
                    _self.$.addClass('no-slideshow');
                    TM.set(_self.$slides, { opacity: 1, zIndex: 3 });
                    _self.$.css({ height: 'auto' });
                    _self.$slides.css({ height: 'auto' });
                } else {
                    _self.$.removeClass('no-slideshow');
                    TM.set(_self.$slides, { opacity: 0, zIndex: -1 });
                    TM.set(_self.$currentSlide, { opacity: 1, zIndex: 3 });
                }
            }

            if (_self.auto) _self.setAuto();
        }
    }, {
        key: 'show',
        value: function show() {}
    }, {
        key: 'bindEvents',
        value: function bindEvents() {
            var _self = this;
            _self.$buttons.on('click', function () {

                if ($(this).hasClass('prev')) _self.direction = -1;else if ($(this).hasClass('next')) _self.direction = 1;

                if (!_self.animating) _self.slide(_self.direction);
            });

            // TODO : CHANGE HACK
            $(window).trigger('resize');
        }
    }, {
        key: 'sizes',
        value: function sizes() {
            var _self = this;

            if (_self.$.is('#linked-products-slideshow')) {

                if (smallScreen && !_self.$.hasClass('no-slideshow')) {
                    _self.init();
                }

                if (!smallScreen && _self.$.hasClass('no-slideshow')) {
                    _self.init();
                }
            }

            if (_self.type === 'classic') {
                _self.sliderW = _self.$slider.width();
            }

            if (_self.nbSlides < 2) _self.$.find('.nav-slideshow').hide();else if (_self.type === 'gallery-imgs') {
                _self.sliderW = 0;
                $.each(_self.$slides, function () {
                    var thisW = $(this).outerWidth(true);
                    _self.sliderW += thisW;
                });

                _self.$slider.width(_self.sliderW);
            }

            if (_self.$.hasClass('define-height') && !_self.$.hasClass('no-slideshow')) {

                var hMax = 0;

                _self.$slides.each(function () {
                    hMax = Math.max($(this).outerHeight(true), hMax);
                });

                _self.$.height(hMax + 4);
                _self.$slides.height(hMax);

                // Box product case :

                if (_self.$slides.hasClass('box-product')) {
                    _self.$slides.each(function () {
                        $(this).find('.infos-part').outerHeight(hMax - $(this).find('.img-part').height());
                    });
                }
            }
        }
    }, {
        key: 'slide',
        value: function slide() {

            var _self = this;
            _self.$currentSlide = _self.$slides.eq(_self.currentIndex);
            _self.animating = true;
            var nextIndex = null;
            if (_self.direction === 1) nextIndex = _self.currentIndex < _self.nbSlides - 1 ? _self.currentIndex + 1 : 0;else nextIndex = _self.currentIndex !== 0 ? _self.currentIndex - 1 : _self.nbSlides - 1;

            var $nextSlide = _self.$slides.eq(nextIndex);

            if (_self.type === 'classic') {
                _self.timeline.set($nextSlide, { x: _self.direction * _self.sliderW, opacity: 1, zIndex: 3 });
                _self.timeline.to(_self.$currentSlide, 0.5, { x: -_self.direction * _self.sliderW, ease: Power2.easeOut });
                _self.timeline.to($nextSlide, 0.5, { x: 0, ease: Power2.easeOut, onComplete: function onComplete() {
                        _self.$currentSlide.css({ zIndex: -1 });
                        _self.currentIndex = nextIndex;
                        // console.log(_self.currentIndex)
                        _self.setNumber();
                        _self.animating = false;
                    } }, '-=0.5');
            }

            // ------- >     GALLERY IMAGES FULL

            if (_self.type === 'gallery-imgs') {

                if (_self.direction === 1) {

                    _self.sliderW = _self.$slider.find('.box:first').outerWidth(true);

                    _self.timeline.to(_self.$slider, 0.8, { x: -_self.sliderW, ease: Power2.easeInOut, onComplete: function onComplete() {
                            _self.timeline.set(_self.$slider, { x: 0 });
                            var $first = _self.$slider.find('.box:first');
                            TM.set($first, { opacity: 0 });
                            _self.$slider.find('.box:last').after($first);
                            TM.to($first, 0.2, { opacity: 1 });
                            _self.animating = false;
                        } });
                } else if (_self.direction === -1) {

                    _self.sliderW = _self.$slider.find('.box:last').outerWidth(true);

                    _self.timeline.set(_self.$slider, { x: -_self.sliderW });
                    _self.$slider.find('.box:first').before(_self.$slider.find('.box:last'));
                    _self.timeline.to(_self.$slider, 0.8, { x: 0, ease: Power2.easeInOut, onComplete: function onComplete() {
                            _self.animating = false;
                        } });
                }
            }

            _self.timeline.play();
        }
    }, {
        key: 'setNumber',
        value: function setNumber() {
            var _self = this;

            var htmlIndex = _self.currentIndex + 1;

            if (htmlIndex < 10) htmlIndex = '0' + htmlIndex;

            _self.$number.html(htmlIndex);
        }
    }]);

    return Slideshow;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SlideshowDouble = function (_Slideshow) {
    _inherits(SlideshowDouble, _Slideshow);

    function SlideshowDouble(slideshow) {
        _classCallCheck(this, SlideshowDouble);

        var _this = _possibleConstructorReturn(this, (SlideshowDouble.__proto__ || Object.getPrototypeOf(SlideshowDouble)).call(this, slideshow));

        var _self = _this;

        _self.type = 'slideshow-double';

        _self.textElements = '.title-dot, .name,  .count, .section-mention, .extract, .more';

        if (_self.$.is('#slideshow-event')) {
            _self.textElements = '.section-subtitle, .page-title,  .cover-details, .button, .big-date';
        }

        TM.set(_self.$currentSlide.find(_self.textElements), { opacity: 0, x: -20 });
        TM.set(_self.$currentSlide.find('.mask'), { width: '100%', right: 0, left: 'auto' });

        return _this;
    }

    _createClass(SlideshowDouble, [{
        key: 'show',
        value: function show() {

            var _self = this;

            var timeline = new TimelineMax({ onComplete: function onComplete() {} });

            timeline.staggerTo(_self.$currentSlide.find(_self.textElements), .5, { opacity: 1, x: 0, ease: Quad.easeOut }, .05, 0);
            timeline.to(_self.$currentSlide.find('.mask'), .5, { width: '0', ease: Power2.easeOut }, 0);

            timeline.play();
        }
    }, {
        key: 'sizes',
        value: function sizes() {

            var _self = this;
            if (mobileScreen) {

                if (_self.$.is('#slideshow-event')) {

                    _self.$.addClass('mobile-version');

                    _self.$slides.each(function () {
                        var $date = $(this).find('.big-date');
                        $(this).find('.text-part').append($date);
                    });
                }

                var hMaxImg = 0;
                var hMaxText = 0;
                var hMax = 0;

                _self.$slides.each(function () {

                    hMaxImg = Math.max($(this).find('.img-part').height(), hMaxImg);
                    hMaxText = Math.max($(this).find('.text-part').outerHeight(), hMaxText);
                });

                hMax = hMaxImg + hMaxText;
                _self.$.height(hMax);
                _self.$slides.each(function () {
                    $(this).find('.text-part').outerHeight(hMaxText);
                });
            } else {

                _self.$.height(550);

                if (_self.$.hasClass('mobile-version') && _self.$.is('#slideshow-event')) {

                    _self.$slides.each(function () {
                        var $date = $(this).find('.text-c .big-date');
                        $(this).append($date);
                    });
                    _self.$.removeClass('mobile-version');
                }
            }
        }
    }, {
        key: 'slide',
        value: function slide() {
            var _self = this;

            _self.animating = true;

            var nextIndex = null;

            if (_self.direction === 1) {
                nextIndex = _self.currentIndex < _self.nbSlides - 1 ? _self.currentIndex + 1 : 0;
            } else {
                nextIndex = _self.currentIndex !== 0 ? _self.currentIndex - 1 : _self.nbSlides - 1;
            }

            var $currentSlide = _self.$slides.eq(_self.currentIndex);
            var $nextSlide = _self.$slides.eq(nextIndex);

            if (_self.direction == 1) {
                $currentSlide.find('.mask').css({ left: '0', right: 'auto' });
                $nextSlide.find('.mask').css({ width: '100%', left: 'auto', right: '0' });
            } else {
                $currentSlide.find('.mask').css({ left: 'auto', right: '0' });
                $nextSlide.find('.mask').css({ width: '100%', left: '0', right: 'auto' });
            }

            TM.set($nextSlide.find(_self.textElements), { opacity: 0, x: -20 * _self.direction });

            TM.staggerTo($currentSlide.find(_self.textElements), .5, { opacity: 0, x: 20 * _self.direction, ease: Quad.easeIn }, .05);

            TM.to($currentSlide.find('.mask'), .5, { width: '100%', ease: Power2.easeIn, onComplete: function onComplete() {

                    $nextSlide.css({ zIndex: 3, opacity: 1 });
                    $currentSlide.css({ zIndex: -1, opacity: 0 });

                    TM.staggerTo($nextSlide.find(_self.textElements), .5, { opacity: 1, x: 0, ease: Quad.easeOut }, .05);
                    TM.to($nextSlide.find('.mask'), .5, { width: '0', ease: Power2.easeOut });

                    _self.currentIndex = nextIndex;
                    _self.animating = false;
                } });
        }
    }]);

    return SlideshowDouble;
}(Slideshow);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SlideshowHome = function (_Slideshow) {
    _inherits(SlideshowHome, _Slideshow);

    function SlideshowHome(slideshow) {
        _classCallCheck(this, SlideshowHome);

        var _this = _possibleConstructorReturn(this, (SlideshowHome.__proto__ || Object.getPrototypeOf(SlideshowHome)).call(this, slideshow));

        var _self = _this;

        _self.type = 'slideshow-home';
        _self.textElements = '.section-mention, .section-title, .extract';
        TM.set(_self.$slides, { zIndex: -1 });
        TM.set(_self.$currentSlide, { zIndex: 3 });

        TM.set(_self.$slides.find('.img-c'), { opacity: 0 });
        TM.set(_self.$slides.find('.big-date'), { opacity: 0 });
        TM.set(_self.$slides.find('.button'), { y: 60 });
        TM.set(_self.$slides.find(_self.textElements), { opacity: 0, y: -20 });
        _self.$slides.find('.d-cell').addClass('closed');

        /*
        TM.set(_self.$slides.slice(1).find('.img-c'), {opacity:0})
        TM.set(_self.$slides.slice(1).find('.big-date'), {opacity:0})
        TM.set(_self.$slides.slice(1).find('.button'), {y:60})
        TM.set(_self.$slides.slice(1).find(_self.textElements), {opacity:0, y:-20})
        _self.$slides.slice(1).find('.d-cell').addClass('closed')
        */

        _self.interval = null;

        return _this;
    }

    _createClass(SlideshowHome, [{
        key: 'show',
        value: function show() {

            var _self = this;

            var timeline = new TimelineMax({ onComplete: function onComplete() {
                    _self.automatique();
                } });

            timeline.set(_self.$currentSlide.find('.img-c'), { scale: 1.05 });
            timeline.to(_self.$currentSlide.find('.img-c'), 0.7, { opacity: 1, scale: 1 }, 0);
            timeline.to(_self.$currentSlide.find('.big-date'), 0.4, { y: 0 }, 0.3);
            timeline.staggerTo(_self.$currentSlide.find(_self.textElements), 0.5, { opacity: 1, y: 0, onComplete: function onComplete() {
                    timeline.to(_self.$currentSlide.find('.button'), 0.4, { y: 0 });
                    _self.$currentSlide.find('.d-cell').removeClass('closed');
                } }, 0.05, 0.6);

            timeline.play();
        }
    }, {
        key: 'sizes',
        value: function sizes() {
            var _self = this;

            if (mobileScreen) {

                if (!_self.$.hasClass('mobile-version')) {

                    _self.$.addClass('mobile-version');

                    _self.$slides.each(function () {
                        var $date = $(this).find('.big-date');
                        $(this).find('.infos-c .d-cell').append($date);
                    });
                }
            } else {
                if (_self.$.hasClass('mobile-version')) {

                    _self.$slides.each(function () {
                        var $date = $(this).find('.infos-c .d-cell .big-date');
                        $(this).append($date);
                    });

                    _self.$.removeClass('mobile-version');
                }
            }
        }
    }, {
        key: 'slide',
        value: function slide() {
            var _self = this;

            _self.animating = true;

            var nextIndex = null;

            if (_self.direction === 1) {
                nextIndex = _self.currentIndex < _self.nbSlides - 1 ? _self.currentIndex + 1 : 0;
            } else {
                nextIndex = _self.currentIndex !== 0 ? _self.currentIndex - 1 : _self.nbSlides - 1;
            }

            var $currentSlide = _self.$slides.eq(_self.currentIndex);
            var $nextSlide = _self.$slides.eq(nextIndex);

            clearInterval(_self.interval);

            TM.set($nextSlide.find(_self.textElements), { opacity: 0, y: -20 }, .05);
            TM.set($nextSlide.find('.img-c'), { opacity: 0, scale: 1.05 });
            TM.set($nextSlide.find('.big-date'), { opacity: 0, x: -20 });
            TM.set($nextSlide.find('.button'), { y: 60 });

            TM.staggerTo($currentSlide.find(_self.textElements), .5, { opacity: 0, y: 20, ease: Quad.easeIn }, .05);
            TM.to($currentSlide.find('.big-date'), .4, { opacity: 0, x: 20, ease: Quad.easeIn });
            TM.to($currentSlide.find('.button'), .5, { y: 60, ease: Quad.easeIn });

            $currentSlide.find('.d-cell').addClass('closed');

            TM.to($currentSlide.find('.img-c'), .7, { opacity: 0, scale: 1.05, onComplete: function onComplete() {
                    $nextSlide.css({ zIndex: 3, opacity: 1 });

                    $currentSlide.css({ zIndex: -1, opacity: 0 });

                    TM.to($nextSlide.find('.img-c'), .7, { opacity: 1, scale: 1 });

                    TM.to($nextSlide.find('.big-date'), .4, { opacity: 1, x: 0, ease: Quad.easeOut });

                    TM.staggerTo($nextSlide.find(_self.textElements), .5, { opacity: 1, y: 0, ease: Quad.easeOut, onComplete: function onComplete() {
                            $nextSlide.find('.d-cell').removeClass('closed');
                            TM.to($nextSlide.find('.button'), .5, { y: 0, delay: .2, ease: Quad.easeOut });
                        } }, .05);

                    _self.currentIndex = nextIndex;
                    _self.animating = false;

                    _self.automatique();
                } });
        }
    }, {
        key: 'automatique',
        value: function automatique() {
            var _self = this;

            _self.interval = setInterval(function () {

                _self.direction = 1;
                if (!_self.animating) _self.slide(_self.direction);
            }, 8000);
        }
    }]);

    return SlideshowHome;
}(Slideshow);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SlideshowLexidapper = function () {
    function SlideshowLexidapper() {
        _classCallCheck(this, SlideshowLexidapper);

        var _self = this;

        _self.windowW = window.innerWidth;
        _self.valueToTranslate = _self.windowW / 3;

        _self.$section = $('#lexidapper-slideshow');
        _self.$list = _self.$section.find('ul');

        _self.animation = false;
        _self.flagFollow = false;
        _self.oldX = null;
        _self.screen = null;

        _self.border = 5;

        // TO COMMENT C.
        _self.$cursor = _self.$section.find('.custom-cursor');
        // END TO COMMENT C.

        _self.initSize();

        $(window).on('resize', function () {
            _self.initSize();
        });
    }

    _createClass(SlideshowLexidapper, [{
        key: 'initSize',
        value: function initSize() {
            var _self = this;

            // recalcule des tailles
            _self.windowW = window.innerWidth;
            _self.valueToTranslate = _self.windowW / 3;

            // en fonction des class reset
            // desk ers tab ou tab init première fois


            // CODE BLOQUE DANS LE COMMIT
            // const _self = this
            //
            // let mouseX = event.clientX
            //
            // // si première valeur de drag lui attribut la position de la souris actuelle
            // // donc pas de décalage pour le mouvement au début
            // if (_self.oldX === null) _self.oldX = mouseX
            //
            // // calcule du décalage
            // // diminue par 5 la vitesse
            // // mutiplie par -1 pour éviter l'effet mirroir
            // let decalageX = ( _self.oldX - mouseX ) / 5 * -1
            // TweenMax.set(_self.$list, {x: decalageX})
            // FIN CODE BLOQUE DANS LE COMMIT

            if (_self.windowW <= 1023 && _self.$section.hasClass('desk') || _self.windowW <= 1023 && !_self.$section.hasClass('desk') && !_self.$section.hasClass('tab')) _self.initTab();

            // juste le tab resize boxes
            else if (_self.windowW <= 1023 && _self.$section.hasClass('tab')) {
                    // timer pour pas avoir de bug avec les transition css
                    setTimeout(function () {
                        _self.setSizeTab();
                    }, 500);
                }

                // juste le desk resize boxes
                else if (_self.windowW > 1023 && _self.$section.hasClass('desk')) {
                        // timer pour pas avoir de bug avec les transition css
                        setTimeout(function () {
                            _self.setSizesDesk();
                        }, 500);
                    }

                    // tab vers desk ou desk init première fois
                    else if (_self.windowW > 1023 && _self.$section.hasClass('tab') || _self.windowW > 1023 && !_self.$section.hasClass('desk') && !_self.$section.hasClass('tab')) _self.initDesk();
        }

        // VERSION MOBILE


    }, {
        key: 'initTab',
        value: function initTab() {
            var _self = this;

            // enleve le desk
            _self.resetDesk();

            // setClass pour mobile
            _self.setClassTab();

            // trouve les tailles
            _self.setSizeTab();

            // init des flèches
            _self.initArrow();

            // init click mot actif
            _self.initClickWord();

            // ajoute la class
            _self.$section.removeClass('desk');
            _self.$section.addClass('tab');
        }
    }, {
        key: 'resetTab',
        value: function resetTab() {
            var _self = this;

            // enleve les class
            _self.$list.find('.active').removeClass('active');

            // enleve les clicks
            // sur fleches
            // et mots
            var prev = _self.$section.find('.button-nav.prev');
            var next = _self.$section.find('.button-nav.next');
            prev.off('click');
            next.off('click');

            var $words = _self.$section.find('.box-word');
            $words.off('click');
        }
    }, {
        key: 'setClassTab',
        value: function setClassTab() {
            var _self = this;

            _self.$list.find('li:first-child').addClass('active');
        }
    }, {
        key: 'setSizeTab',
        value: function setSizeTab() {
            var _self = this;

            // 1 - definitions
            var $defs = _self.$section.find('.box-word .def');
            var margin = Number($defs.css('margin-top').replace('px', ''));
            var wordH = _self.$section.find('.box-word .word').outerHeight();
            var maxHeight = 0;

            // parcours les définition pour trouver laquelel est la plus grande
            // vu que position absolute on va directement pointer le contenu
            $defs.each(function () {

                var $element = $(this).find('.content-border');
                $element.css('height', 'auto');
                if ($element.outerHeight() > maxHeight) maxHeight = $element.outerHeight();
            });

            // set la taille de toutes les définitions
            var defH = maxHeight + _self.border + margin;
            $defs.css('height', defH);

            // set la taille de la section
            // taille box + taille mot
            var sectionH = defH + wordH;
            _self.$section.css('height', sectionH);
        }
    }, {
        key: 'initArrow',
        value: function initArrow() {
            var _self = this;

            var prev = _self.$section.find('.button-nav.prev');
            var next = _self.$section.find('.button-nav.next');

            prev.on('click', _self.animPrevTab.bind(_self));
            next.on('click', _self.animNextTab.bind(_self));
        }
    }, {
        key: 'initClickWord',
        value: function initClickWord() {
            var _self = this;

            var $words = _self.$section.find('.box-word');

            $words.on('click', function () {
                var link = $(this).attr('data-link');
                _self.openWord(link);
            });
        }
    }, {
        key: 'animPrevTab',
        value: function animPrevTab() {
            var _self = this;

            var $current = _self.$section.find('.active');
            var currentIndex = _self.$section.find('li').index($current);
            var prevIndex = null;

            if (currentIndex === 0) prevIndex = _self.$section.find('li').length - 1;else prevIndex = currentIndex - 1;

            $current.removeClass('active');
            _self.$section.find('li').eq(prevIndex).addClass('active');
        }
    }, {
        key: 'animNextTab',
        value: function animNextTab() {
            var _self = this;

            var $current = _self.$section.find('.active');
            var currentIndex = _self.$section.find('li').index($current);
            var nextIndex = null;

            if (currentIndex === _self.$section.find('li').length - 1) nextIndex = 0;else nextIndex = currentIndex + 1;

            $current.removeClass('active');
            _self.$section.find('li').eq(nextIndex).addClass('active');
        }

        // VERSION DESK

    }, {
        key: 'initDesk',
        value: function initDesk() {
            var _self = this;

            // enleve le tab
            _self.resetTab();

            _self.setSizesDesk();

            _self.setClassDesk();

            _self.watcherDrag();

            // change la class
            _self.$section.removeClass('tab');
            _self.$section.addClass('desk');
        }
    }, {
        key: 'initCursor',
        value: function initCursor() {
            var _self = this;

            _self.positionSection = _self.$section.offset().top;

            _self.$section.on('mousemove', _self.moveCursor.bind(_self));
            _self.$cursor.on('mousemove', _self.moveCursor.bind(_self));

            // _self.$section.on('mousedown', _self.cursorDown.bind(_self))
            _self.$section.on('mouseup', _self.resetCursor.bind(_self));
        }
    }, {
        key: 'moveCursor',
        value: function moveCursor(event) {
            var _self = this;

            var x = event.clientX;
            var y = event.pageY - _self.positionSection;

            _self.$cursor.css('top', y);
            _self.$cursor.css('left', x);
        }
    }, {
        key: 'cursorDown',
        value: function cursorDown() {
            var _self = this;

            _self.resetCursor();

            _self.$cursor.addClass('cursor-clicked');
        }
    }, {
        key: 'resetCursor',
        value: function resetCursor() {
            var _self = this;

            _self.$cursor.removeClass('cursor-clicked');
        }
    }, {
        key: 'resetDesk',
        value: function resetDesk() {
            var _self = this;

            // enleve les watchers
            _self.$section.off('mousedown');
            _self.$section.off('mouseup');
            _self.$section.off('touchstart');

            // enlève les class
            _self.resetClassDesk();
        }
    }, {
        key: 'setSizesDesk',
        value: function setSizesDesk() {
            var _self = this;

            var $defs = _self.$section.find('.box-word .def');
            var maxHeight = 0;

            // trouve la def la plus longue
            $defs.each(function () {
                $(this).css('height', 'auto');
                if ($(this).outerHeight() > maxHeight) maxHeight = $(this).outerHeight();
            });

            // adapte la taille de toutes les defs
            $defs.css('height', maxHeight + _self.border);

            // réucpère le padding pour le cursor custom
            var padding = Number(_self.$section.css('padding-top').replace('px', ''));

            // adapte la taille du container
            _self.$section.css('height', _self.$section.find('.box-word').outerHeight() + padding * 2);
        }
    }, {
        key: 'setClassDesk',
        value: function setClassDesk() {

            var _self = this;

            _self.$list.find('li:first-child').toggleClass('prev');
            _self.$list.find('li:nth-child(2)').toggleClass('active');
            _self.$list.find('li:nth-child(3)').toggleClass('next');
        }
    }, {
        key: 'resetClassDesk',
        value: function resetClassDesk() {

            var _self = this;

            _self.$list.find('.prev').toggleClass('prev');
            _self.$list.find('.next').toggleClass('next');
            _self.$list.find('.active').toggleClass('active');
        }
    }, {
        key: 'watcherDrag',
        value: function watcherDrag() {
            var _self = this;

            // pour les tablette paysage
            _self.$section.on('touchstart', _self.touchBigScreen.bind(_self));

            // ecouteur des évènements
            _self.$section.on('mousedown', _self.startDrag.bind(_self));
            _self.$section.on('mouseup', _self.endDrag.bind(_self));

            // init cursor
            _self.initCursor();
        }
    }, {
        key: 'touchBigScreen',
        value: function touchBigScreen(event) {
            var _self = this;

            if (_self.animation) return null;

            var touchX = event.touches[0].clientX;

            // calcule la position des éléments prev / next / active
            // en fonction de la position du curseur :
            // soit animation
            // soit ouvre la page du mot

            var $prev = _self.$section.find('.prev');
            var prevMinX = $prev.offset().left;
            var prevMaxX = prevMinX + $prev.innerWidth();

            var $next = _self.$section.find('.next');
            var nextMinX = $next.offset().left;
            var nextMaxX = nextMinX + $next.innerWidth();

            var $active = _self.$section.find('.active');
            var activeMin = $active.offset().left;
            var activeMAx = activeMin + $active.innerWidth();

            if (touchX >= prevMinX && touchX <= prevMaxX) _self.animPrevDesk();else if (touchX >= nextMinX && touchX <= nextMaxX) _self.animNextDesk();else if (touchX >= activeMin && touchX <= activeMAx) _self.openWord($active.attr('data-link'));
        }
    }, {
        key: 'startDrag',
        value: function startDrag() {
            var _self = this;

            // bloque si animation slideshow
            if (_self.animation) return null;

            // anim le curseur
            _self.cursorDown();
            _self.$section.addClass('cursor-transparent');

            // lance le drag
            _self.$section.on('mousemove', _self.followMouse.bind(_self));
        }
    }, {
        key: 'followMouse',
        value: function followMouse(event) {
            var _self = this;

            var mouseX = event.clientX;

            // si première valeur de drag lui attribut la position de la souris actuelle
            // donc pas de décalage pour le mouvement au début
            if (_self.oldX === null) _self.oldX = mouseX;

            // calcule du décalage
            // diminue par 5 la vitesse
            // mutiplie par -1 pour éviter l'effet mirroir
            var decalageX = (_self.oldX - mouseX) / 5 * -1;
            TweenMax.set(_self.$list, { x: decalageX });
        }
    }, {
        key: 'endDrag',
        value: function endDrag(event) {
            var _self = this;

            var mouseX = event.clientX;

            // bloque si animation slideshow
            if (_self.animation) return null;

            // si juste un click sans drag
            if (_self.oldX === null) {

                // calcule la position des éléments prev / next / active
                // en fonction de la position du curseur :
                // soit animation
                // soit ouvre la page du mot

                var $prev = _self.$section.find('.prev');
                var prevMinX = $prev.offset().left;
                var prevMaxX = prevMinX + $prev.innerWidth();

                var $next = _self.$section.find('.next');
                var nextMinX = $next.offset().left;
                var nextMaxX = nextMinX + $next.innerWidth();

                var $active = _self.$section.find('.active');
                var activeMin = $active.offset().left;
                var activeMAx = activeMin + $active.innerWidth();

                if (mouseX >= prevMinX && mouseX <= prevMaxX) _self.animPrevDesk();else if (mouseX >= nextMinX && mouseX <= nextMaxX) _self.animNextDesk();else if (mouseX >= activeMin && mouseX <= activeMAx) _self.openWord($active.attr('data-link'));
            }

            // si drag
            else {

                    var direction = mouseX - _self.oldX;

                    if (direction > -50 && direction < 50) TweenMax.to(_self.$list, 0.25, { x: 0 });else {
                        if (direction > -50) _self.animPrevDesk();else if (direction < 50) _self.animNextDesk();
                    }

                    _self.oldX = null;
                }

            // désactive le suivi de la souris
            _self.$section.off('mousemove');

            // reactive pour le curseur
            _self.$section.on('mousemove', _self.moveCursor.bind(_self));
            _self.$cursor.on('mousemove', _self.moveCursor.bind(_self));
            _self.$section.removeClass('cursor-transparent');
        }
    }, {
        key: 'animPrevDesk',
        value: function animPrevDesk() {
            var _self = this;

            // si déjà en animation on block la fonction
            if (_self.animation) return null;

            // set le flag pour l'animation
            _self.animation = true;

            // remove le flag
            _self.resetClassDesk();

            // déplace élément
            var firstItem = _self.$list.find('li:last-child')[0];
            _self.$list.prepend(firstItem);

            var listX = _self.$list.offset().left;

            // reset la valeur
            TweenMax.set(_self.$list, { x: -_self.valueToTranslate + listX });

            // lance l'animation
            TweenMax.to(_self.$list, 0.5, { x: 0, onComplete: _self.endAnimPrevDesk.bind(_self) });
        }
    }, {
        key: 'endAnimPrevDesk',
        value: function endAnimPrevDesk() {
            var _self = this;

            // reset les valeurs
            _self.setClassDesk();
            _self.animation = false;
        }
    }, {
        key: 'animNextDesk',
        value: function animNextDesk() {
            var _self = this;

            // si déjà en animation on block la fonction
            if (_self.animation) return null;

            // set le flager pour l'animation
            _self.animation = true;

            // remove le flag
            _self.resetClassDesk();

            // lance animation
            TweenMax.to(_self.$list, 0.5, { x: -_self.valueToTranslate, onComplete: _self.endAnimNextDesk.bind(_self) });
        }
    }, {
        key: 'endAnimNextDesk',
        value: function endAnimNextDesk() {
            var _self = this;

            // déplace élément
            var firstItem = _self.$list.find('li:first-child')[0];
            _self.$list.append(firstItem);

            // reset les valeurs
            TweenMax.set(_self.$list, { x: 0 });
            _self.setClassDesk();

            // lance le flag pour l'animation
            _self.animation = false;
        }

        // COMMUNS

    }, {
        key: 'openWord',
        value: function openWord(link) {
            document.location.href = link;
        }
    }]);

    return SlideshowLexidapper;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Must be initialzed as late as possible
 *
 * let animations = new Animations(options)
 *
 * Options
 *
 * easing               : fn, BezierEasing(0,.9,.9,1) based off CSS easings
 * duration             : int, scroll animation duration in ms
 * scroll_detect        : node, detect scroll on element
 */

var SmoothScroll = function () {
    function SmoothScroll($node, args) {
        _classCallCheck(this, SmoothScroll);

        // error checking

        if ($node === undefined) $node = document.querySelector('.js-smooth-scroll');

        if (!isElement($node)) {
            console.error('SmoothScroll constructor is not of type node');
            return false;
        }

        // variables

        this.$container = $node;
        this.$content = wrapChildren($node);
        this.scroll = {};
        this.scroll.y = 0;
        this.scroll.last_y = 0;
        this.safe_zone = window.innerHeight / 2;
        this.repeat_count = 0;

        // default options

        this.defs = {};
        this.defs.easing = BezierEasing(0, .9, .9, 1); // js easing
        this.defs.duration = 2000;
        this.defs.scroll_detect = document.body;

        // set options

        if (args) {
            for (var key in this.defs) {
                if (args[key] || args[key] == 0) this.defs[key] = args[key];
            }
        }

        this.init();
    }

    _createClass(SmoothScroll, [{
        key: 'init',
        value: function init() {
            this.setup();
            this.resize();
            this.bindEvents();
        }
    }, {
        key: 'setup',
        value: function setup() {
            this.$fake_content = document.createElement('div');
            this.$container.appendChild(this.$fake_content);
        }
    }, {
        key: 'resize',
        value: function resize() {
            this.sectionsSetup();
            this.setBodyHeight();
        }
    }, {
        key: 'bindEvents',
        value: function bindEvents() {
            var t = this;

            this.defs.scroll_detect.onscroll = throttle(function () {
                t.animate(t.moveElements.bind(t), t.defs.duration * 10, t.defs.easing);
            }, 5);

            document.addEventListener('appResize', t.resize.bind(t));
        }
    }, {
        key: 'isInView',
        value: function isInView(el) {
            var in_top = el.offset_top + el.height + this.safe_zone > this.scroll.y;
            var in_bottom = el.offset_top - window.innerHeight < this.scroll.y + this.safe_zone;
            return in_top && in_bottom;
        }
    }, {
        key: 'setBodyHeight',
        value: function setBodyHeight() {

            // set the body height to imitate the content

            setCSS(this.$content, {
                'position': '',
                'width': '',
                'height': '',
                'overflow': 'hidden'
            });

            setCSS(this.$fake_content, {
                'height': this.$content.offsetHeight + 'px'
            });

            setCSS(this.$content, {
                'position': 'fixed',
                'width': '100%',
                'height': '100%',
                'overflow': 'hidden',
                'top': 0
            });
        }
    }, {
        key: 'moveElements',
        value: function moveElements(p) {
            // p from 0 to 1

            var calc = this.scroll.last_y + (window.pageYOffset - this.scroll.last_y) * p;

            this.scroll.y = calc;
            if (parseInt(calc) == 0) calc = 0;
            if (calc == 0 || this.scroll.last_y == this.scroll.y) {
                this.repeat_count++;
                if (this.repeat_count > 5) clearInterval(this.animation);
                return false;
            }

            this.repeat_count = 0;

            for (var key in this.sections) {

                var el = this.sections[key];
                if (this.isInView(el)) {
                    setCSS(el.$node, {
                        'transform': 'translate3d(0, ' + -calc + 'px, 0)'
                    });
                }
            }

            this.scroll.last_y = this.scroll.y;
        }
    }, {
        key: 'animate',
        value: function animate(render, duration, easing) {
            var t = this;

            clearInterval(t.animation);
            var start = Date.now();

            t.animation = setInterval(function () {
                var p = (Date.now() - start) / duration;

                if (p > 1) {

                    // scroll animation has ended

                    render(1);
                    clearInterval(t.animation);
                } else {

                    // Set initial transform on each section

                    render(easing(p.toFixed(6)));
                }
            }, 1 / 60);
        }
    }, {
        key: 'sectionsSetup',
        value: function sectionsSetup() {
            var _this = this;

            // store data for sections

            this.sections = {};
            forEach(this.$content.children, function ($el, index) {

                var data = {};
                data.$node = $el;
                data.offset_top = $el.offsetTop;
                data.height = $el.offsetHeight;

                // Set initial transform on each section

                setCSS(data.$node, {
                    'transform': 'translate3d(0, ' + -_this.scroll.y + 'px, 0)'
                });

                _this.sections[index] = data;
            });
        }
    }]);

    return SmoothScroll;
}();
// class Tablette {
//
//
//     constructor(){
//         const t = this
//
//         // box home page
//         // t.$actusHome = $('section.home-actu')
//         // t.$actusHomeBlocks = t.$actusHome.find('.block-actu')
//
//         t.init()
//     }
//
//     init() {
//         const t = this
//
//         // flèches de navigation sur la home pour les actualités
//         if ( $('#homepage').length > 0 ) {
//             t.$container = $('section.home-actu').find('.block-actu')
//             t.initActus()
//         }
//
//         // flèches de navigation sur single artistes pour les actualités
//         if ( $('main.single').length > 0 ) {
//             t.$container = $('section.artist-news')
//             t.setSizeSingleActu()
//             t.initActus()
//         }
//     }
//
//     initActus() {
//         const t = this
//
//         // affiche le premier element
//         t.$container.find('.list-boxes article:first-child').addClass('active')
//
//         // watcher pour les onclick des flèches
//         t.$container.find('.nav .prev').on('click', t.actusPrev.bind(t) )
//         t.$container.find('.nav .next').on('click', t.actusNext.bind(t) )
//
//     }
//
//     actusPrev(e){
//         const t = this
//
//         console.log('prev')
//
//         // change l'élément
//         let $element = e.target
//         let $parent = $($element).parents('.block-actu')
//         let $container = $parent.find('.list-boxes')
//         let allArticles = $container.find('article')
//         let $currentActive = $container.find('.active')
//         let currentIndex = allArticles.index($currentActive)
//         let numberElements = allArticles.length
//         let prevElement = null
//
//         if ( currentIndex === 0) prevElement = numberElements - 1
//         else prevElement = currentIndex - 1
//
//         $currentActive.removeClass('active')
//         $container.find('article').eq(prevElement).addClass('active')
//
//         // changer le nombre
//         if (prevElement + 1 < 10 ) prevElement = '0' + (prevElement + 1)
//         $parent.find('.number').text(prevElement)
//
//     }
//
//     actusNext(e){
//         const t = this
//
//         console.log('next')
//
//         // change l'élément
//         let $element = e.target
//         let $parent = $($element).parents('.block-actu')
//         let $container = $parent.find('.list-boxes')
//         let allArticles = $container.find('article')
//         let $currentActive = $container.find('.active')
//         let currentIndex = allArticles.index($currentActive)
//         let numberElements = allArticles.length
//         let nextElement = null
//
//         if ( currentIndex === numberElements - 1) nextElement = 0
//         else nextElement = currentIndex + 1
//
//         $currentActive.removeClass('active')
//         $container.find('article').eq(nextElement).addClass('active')
//
//         // changer le nombre
//         if (nextElement + 1 < 10 ) nextElement = '0' + (nextElement + 1)
//         $parent.find('.number').text(nextElement)
//
//     }
//
//     setSizeSingleActu() {
//         const t = this
//
//         console.log('in set size')
//         let maxHeight = 0
//         let news = t.$container.find('.box-news')
//
//         news.each(function(){
//             if ( $(this).outerHeight() > maxHeight ) maxHeight = $(this).outerHeight()
//         })
//
//         t.$container.find('.list-boxes').css('height', maxHeight)
//
//     }
// }
"use strict";
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Website = function () {
    function Website(name) {
        _classCallCheck(this, Website);

        var _self = this;
        _self.name = name;
        _self.test = true;
        _self.firstload = false;
        _self.init();
    }

    _createClass(Website, [{
        key: 'init',
        value: function init() {

            var _self = this;

            // SVG
            _self.transformSvgImg();

            // LAZYLOAD
            _self.lazyLoad();

            // SIZES
            _self.setSizes();

            // SI TOUCH ENLEVE LES HOVERS
            _self.removeHover();

            // SI IE OU EDGE ON AJOUTE LA CLASS
            _self.ieIe();

            // BOX ARTWORK
            if (window.isMobileTablet && $('#archives-artworks').length > 0) $('.box-artwork').addClass('hover');
        }
    }, {
        key: 'setSizes',
        value: function setSizes() {

            var _self = this;
            ww = $(window).width();
            wh = $(window).height();

            if ($('.j-boxes-height').length > 0) {
                $('.j-boxes-height').each(function () {
                    _self.boxesGrid($(this));
                });
            };

            smallScreen = _self.isSmallScreen();
            mobileScreen = _self.isMobileScreen();
        }
    }, {
        key: 'isSmallScreen',
        value: function isSmallScreen() {
            return $(window).width() < 1023;
        }
    }, {
        key: 'isMobileScreen',
        value: function isMobileScreen() {
            return $(window).width() < 700;
        }
    }, {
        key: 'ieIe',
        value: function ieIe() {
            if (window.isIE || window.isEdge) $('body').addClass('ie');
            // $('body').addClass('ie')
        }
    }, {
        key: 'lazyLoad',
        value: function lazyLoad() {
            var _self = this;

            var $images = $('img.lzld');
            var countImages = $images.length;

            if (countImages === 0) $.event.trigger(EventManager.IMGS_LAZYLOADED);

            $.each($images, function (index) {
                var $img = $(this);

                if ($img('.cropping').length > 0) return false;

                $img.on('load', function () {
                    $img.addClass('loaded');

                    $img.attr('src', $img.attr('data-src'));
                    $img.removeClass('lzld');
                    $count++;
                    if (index === countImages - 1) $.event.trigger(EventManager.IMGS_LAZYLOADED);
                });
            });
        }
    }, {
        key: 'transformSvgImg',
        value: function transformSvgImg() {
            var _self = this;

            var $images = $('img.svg');
            var countImages = $images.length;

            if (countImages === 0) $.event.trigger(EventManager.IMGS_TRANSFORMED);

            $.each($images, function (index) {
                var $img = $(this),
                    imgID = $img.attr('id'),
                    imgClass = $img.attr('class'),
                    imgURL = $img.attr('src');

                $.get(imgURL, function (data) {
                    // Get the SVG tag, ignore the rest
                    var $svg = $(data).find('svg');
                    // Add replaced image's ID to the new SVG
                    if (typeof imgID !== 'undefined') {
                        $svg = $svg.attr('id', imgID);
                    }
                    // Add replaced image's classes to the new SVG
                    if (typeof imgClass !== 'undefined') {
                        $svg = $svg.attr('class', imgClass + ' replaced-svg');
                    }
                    // Remove any invalid XML tags as per http://validator.w3.org
                    $svg = $svg.removeAttr('xmlns:a');
                    // Replace image with new SVG
                    $img.replaceWith($svg);
                }, 'xml');

                if (index === countImages - 1) $.event.trigger(EventManager.IMGS_TRANSFORMED);
            });
        }
    }, {
        key: 'cropImages',
        value: function cropImages() {
            var _self = this;

            var $images = $('img.cropping');
            var countImages = $images.length;

            if (countImages === 0) $.event.trigger(EventManager.IMGS_CROPPED);

            $.each($images, function (index) {

                var $img = $(this);

                if ($img.hasClass('loaded')) cropImg($img);

                cropImg($img, function () {
                    $img.addClass('loaded');
                    if (index === countImages - 1) $.event.trigger(EventManager.IMGS_CROPPED);
                });
            });
        }
    }, {
        key: 'boxesGrid',
        value: function boxesGrid($grid) {

            var _self = this;

            var $boxes = $grid.find('.box');
            var col = parseInt($grid.attr('data-box'));

            var nbLine = Math.ceil($boxes.length / col);

            for (var i = 0; i < nbLine; i++) {
                var hMax = 0;
                var first = i * col;
                var last = i * col + col;

                for (var j = first; j < last; j++) {

                    if ($boxes.eq(0).hasClass('box-news')) hMax = Math.max($boxes.eq(j).find('.infos-c').outerHeight(), hMax);else hMax = Math.max($boxes.eq(j).outerHeight(), hMax);
                }

                if ($boxes.eq(0).hasClass('box-news')) $boxes.slice(first, last).find('.infos-c').outerHeight(hMax);else $boxes.slice(first, last).outerHeight(hMax);
            }
        }
    }, {
        key: 'removeHover',
        value: function removeHover() {

            if (window.isMobileTablet) {
                try {

                    var pattern = /:hover\b/,
                        sheet,
                        rule,
                        selectors,
                        newSelector,
                        selectorAdded,
                        newRule,
                        i,
                        j,
                        k;
                    for (i = 0; i < document.styleSheets.length; i++) {
                        sheet = document.styleSheets[i];
                        for (j = sheet.cssRules.length - 1; j >= 0; j--) {
                            rule = sheet.cssRules[j];
                            if (rule.type !== CSSRule.STYLE_RULE || !pattern.test(rule.selectorText)) {
                                continue;
                            }
                            selectors = rule.selectorText.split(',');
                            newSelector = '';
                            selectorAdded = false;
                            // Iterate over the selectors and test them against the pattern
                            for (k = 0; k < selectors.length; k++) {
                                // Add string to the new selector if it didn't match
                                if (pattern.test(selectors[k])) {
                                    continue;
                                }
                                if (!selectorAdded) {
                                    newSelector += selectors[k];
                                    selectorAdded = true;
                                } else {
                                    newSelector += ", " + selectors[k];
                                }
                            }
                            // Remove the rule, and add the new one if we've got something
                            // added to the new selector
                            if (selectorAdded) {
                                newRule = rule.cssText.replace(/([^{]*)?/, newSelector + ' ');
                                sheet.deleteRule(j);
                                sheet.insertRule(newRule, j);
                            } else {
                                sheet.deleteRule(j);
                            }
                        }
                    }
                } catch (e) {}
            }
        }
    }]);

    return Website;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Wishlist = function () {
    function Wishlist() {
        _classCallCheck(this, Wishlist);

        var _self = this;

        _self.load = false;
        _self.opened = false;
        _self.$ = $('#wishlist-page');
        _self.$listCt = _self.$.find('.wishlist-content');
        _self.$nbelement = $('#nb-in-wishlist');

        _self.onWishlist = _self.$.length > 0;

        _self.$clearBtn = _self.$.find('.clear-wishlist');
        _self.$shareBtn = _self.$.find('.share-wishlist');

        _self.$single = $('.single');
        _self.$btAddWishlist = _self.$single.find('.bt-add-to-wishlist');

        _self.$sharePopin = _self.$.find('#btShareWishlist');
        _self.$popIn = _self.$.find('#popinWishlist');
        _self.$contentPopin = _self.$popIn.find('.content');
        _self.$closeSharePopin = _self.$popIn.find('.close');

        _self.$inputLink = _self.$popIn.find('#linkWishlist');

        _self.init();
    }

    _createClass(Wishlist, [{
        key: 'init',
        value: function init() {
            var _self = this;
            _self.bindEvents();
            // _self.refreshFront(false);
        }
    }, {
        key: 'bindEvents',
        value: function bindEvents() {
            var _self = this;

            _self.$btAddWishlist.on('click', function () {

                if ($(this).hasClass('selected')) {

                    _self.$btAddWishlist.removeClass('selected');

                    _self.removeInterest({
                        post_id: $(this).attr('data-id'),
                        post_type: $(this).attr('data-post_type')
                    });
                } else {

                    _self.addInterest({
                        post_id: $(this).attr('data-id'),
                        post_type: $(this).attr('data-post_type')
                    });
                }
            });

            _self.$.on('click', '.remove-item', function () {

                _self.removeItem($(this).parents('li'));
            });

            _self.$sharePopin.on('click', _self.openSharePopin.bind(_self));

            _self.$closeSharePopin.on('click', _self.closeSharePopin.bind(_self));

            _self.$inputLink.on('click', function () {
                this.setSelectionRange(0, $(this).val().length);
            });

            /*
              if( t.$interestBtn.find('span').text() == '0') t.$interestBtn.find('span').addClass('hide');
              t.$clearBtn.click(function(){
             t.clearList();
             });
               t.$addInputBtn.click(function(){
             t.addInput();
             });
               t.$.on('click', '.clear-input', function(){
             t.clearInput($(this).parents('li'));
             });
              t.$shareBtn.click(function(){
             var url = t.$.find('.link').attr('data-url');
             url = encodeURIComponent(url);
              if(racine.lang == 'fr') {
             var subject = encodeURI("Ma liste d'intérêts sur Racine");
             } else {
             var subject = encodeURI("My interests list on Racine’s website");
             }
                var $mails =  t.$.find('.mailto_share')
              var mail = "";
              for(var i = 0; i < $mails.length; i++) {
             var sep = i < $mails.length - 1 ? ', ' : '';
             mail = mail + $mails.eq(i).val() +  sep;
             }
              window.location.href = "mailto:"+mail+"?subject="+subject+"&body="+ url;
             });
               */
        }
    }, {
        key: 'setupShareLink',
        value: function setupShareLink() {
            var _self = this;

            // on ajoute le suffixe public pour que la page soit différente de la wishlist de base
            var url = document.location.href;

            url = url.substring(0, url.length - 1);
            url += '-publique/?';

            var postypesC = _self.$.find('.list-by-post-type');

            // pour chaque postype on ajoute leurs éléments dans l'url
            postypesC.each(function () {

                var lastChar = url[url.length - 1];
                var title = $(this).attr('data-post_type');

                // sinon bug on arrive sur 404
                if (title === 'product') title += 's';

                // si non le premier on ajoute une esperluette
                if (lastChar == '?') {
                    url += title + '=';
                } else {
                    url += '&' + title + '=';
                }

                // pour tous les élements dans la wishlist on lajoute leur id
                var elements = $(this).find('.box-wishlist');

                elements.each(function () {

                    var lastChar = url[url.length - 1];
                    var id = $(this).attr('data-id');

                    // si le prmeier pas de virgule
                    if (lastChar === "=") {
                        url += id;
                    } else {
                        url += ',' + id;
                    }
                });
            });

            // ajoute la valeur dans l'input
            _self.$inputLink.val(url);
        }
    }, {
        key: 'openSharePopin',
        value: function openSharePopin() {
            var _self = this;

            _self.$popIn.show();
            _self.$popIn.addClass('opened');

            _self.setupShareLink();
        }
    }, {
        key: 'closeSharePopin',
        value: function closeSharePopin() {
            var _self = this;

            _self.$popIn.removeClass('opened');
            setTimeout(function () {
                _self.$popIn.hide();
            }, 500);
        }
    }, {
        key: 'addInterest',
        value: function addInterest(post_info) {
            var _self = this;

            _self.ajaxRequest('vla_add_to_wishlist', post_info, function (response) {

                _self.refreshFront(response);
                var count = Number(_self.$nbelement.text());
                count++;

                if (_self.$nbelement.parents('.bt-wishlist').hasClass('hidden')) _self.$nbelement.parents('.bt-wishlist').removeClass('hidden');

                _self.$nbelement.text(count);

                _self.$btAddWishlist.addClass('selected');
            });
        }
    }, {
        key: 'removeInterest',
        value: function removeInterest(post_info) {
            var _self = this;

            _self.ajaxRequest('vla_remove_from_wishlist', post_info, function (response) {

                // _self.refreshFront(response);
                var count = Number(_self.$nbelement.text());
                count--;

                if (count == 0) _self.$nbelement.parents('.bt-wishlist').addClass('hidden');

                _self.$nbelement.text(count);
            });
        }
    }, {
        key: 'removeItem',
        value: function removeItem($item) {
            var _self = this;

            var post_id = $item.attr('data-id');
            var post_type = $item.parents('.list-by-post-type').attr('data-post_type');

            _self.removeInterest({
                post_id: post_id,
                post_type: post_type
            });

            if ($item.siblings().length > 1) {
                $item.remove();
            } else {
                $item.parents('.list-by-post-type').remove();
            }
        }
    }, {
        key: 'clearList',
        value: function clearList() {
            var _self = this;

            _self.ajaxRequest('clear_list', {}, function (response) {
                _self.refreshFront(response);
            });
        }
    }, {
        key: 'refreshFront',
        value: function refreshFront(html) {
            var _self = this;

            if (html && _self.onWishlist) {
                _self.$listCt.html(html);
            }

            // _self.refreshWishlistButton()


            /*
            var nbInterest = t.$listCt.find('li').length;
             if(nbInterest > 0)  t.$interestBtn.find('span').removeClass('hide');
            else  t.$interestBtn.find('span').addClass('hide');
              t.$interestBtn.find('span').text(nbInterest);
             if(nbInterest > 0){
                t.$clearBtn.show();
                t.$shareBtn.show();
             }else{
                t.$clearBtn.hide();
                t.$shareBtn.hide();
            }
             */
        }

        // refreshWishlistButton(){
        //     const _self = this
        //
        //     let count = parseInt(_self.$nbelement.text());
        //     _self.$nbelement.text(count);
        //
        //     // let nbInterest = parseInt($('#bt-interests').find('.pastille').text());
        //     // console.log('le nombre est : ' + nbInterest);
        //     // nbInterest++;
        //     // console.log('le nimbre devient : ' + nbInterest);
        //     // t.$interestBtn.find('span').text(nbInterest);
        //     //
        //     // $('.bt-interet').addClass('poping');
        //     //
        //     // setTimeout(function(){
        //     //     $('.bt-interet').removeClass('poping');
        //     // },1000)
        //
        // }


    }, {
        key: 'ajaxRequest',
        value: function ajaxRequest(action, data, cb) {
            var _self = this;

            if (!_self.onWishlist) _self.startLoad();

            $.ajax({
                url: dapper.ajaxurl + '?action=' + action,
                data: data,
                type: "POST",
                success: function success(data) {
                    cb(data);
                    _self.endLoad();
                }
            });
        }
    }, {
        key: 'startLoad',
        value: function startLoad() {
            var _self = this;
            _self.load = true;

            _self.$btAddWishlist.addClass('loading');
        }
    }, {
        key: 'endLoad',
        value: function endLoad() {
            var _self = this;
            _self.load = false;

            _self.$btAddWishlist.removeClass('loading');
        }
    }]);

    return Wishlist;
}();
'use strict';

function initForm() {
    var $form = $('form'),
        error = false,
        errorText = '',
        action = $form.attr('data-action'),
        $select = $form.find('.select'),
        $selectItem = $select.find('.list-item'),
        $mSelect = $form.find('.multi-select'),
        $mSelectItem = $mSelect.find('.list-item'),
        $inputs = $form.find('input'),
        $submitMessage = $('#submitMessage');

    $selectItem.on('click', function () {
        var $this = $(this);
        $this.parents('.select').find('.item-selected').text($this.text());
        $this.parents('.select').find('input').val($this.attr('data-value'));
    });

    $mSelectItem.on('click', function () {
        var $selectedMessage = '';
        var $selectedValue = '';
        var $this = $(this);
        if ($this.hasClass('actif')) {
            $this.removeClass('actif');
        } else {
            $this.addClass('actif');
        }
        $mSelectItem.each(function () {
            var $this = $(this);
            if ($this.hasClass('actif')) {
                $selectedMessage = $selectedMessage + $this.text() + ',';
                $selectedValue = $selectedValue + $this.attr('data-value') + ',';
            }
        });
        $selectedMessage = $selectedMessage.substr(0, $selectedMessage.length - 1);
        $selectedValue = $selectedValue.substr(0, $selectedValue.length - 1);
        $this.parents('.multi-select').find('.item-selected').text($selectedMessage);
        $this.parents('.multi-select').find('input').val($selectedValue);
    });

    $('.upload-button').click(function () {
        $(this).parent().find('.ajax_upload').click();
    });

    $form.on('click', '.submit', function (e) {
        e.preventDefault();
        $submitMessage.empty();
        $form.find('label').css({ color: '#000000' });
        error = false;
        errorText = '<li><strong>Merci de renseigner :</strong></li>';
        $submitMessage.html("<li>Envoi en cours ...</li>");

        $inputs.each(function () {
            var $this = $(this),
                type = $this.attr('type');
            if ($this.val() == '' && $this.hasClass('obl') && type != 'email' && type != 'tel') {
                error = true;
                errorText = errorText + '<li>' + $this.parent().find('label span').text() + '</li>';
                $this.parent().find('label').css({ color: '#e74c3c' });
            } else if (type == 'email' && $this.val() == '' && type != 'tel' && $this.hasClass('obl')) {
                if (!validateEmail($this.val())) {
                    errorText = errorText + '<li>Un email valide.</li>';
                    error = true;
                    $this.parent().find('label').css({ color: '#e74c3c' });
                }
            } else if (type = 'tel' && $this.val() == '' && type != 'email' && $this.hasClass('obl')) {
                if ($this.val().match(/[0-9\-\(\)\s]+/) == null || $this.val().length < 8) {
                    errorText = errorText + '<li>Un numéro de téléphone valide.</li>';
                    error = true;
                    $this.parent().find('label').css({ color: '#e74c3c' });
                }
            }
        });

        if (error == true) {
            $submitMessage.html(errorText);
        } else {
            var formData = $inputs.serializeArray();
            $.ajax({
                url: workflow.ajaxurl + '?action=' + action,
                type: "POST",
                data: formData,
                success: function success(data, _success, jqXHR) {
                    $submitMessage.html("<li>Merci votre demande a bien été envoyé</li>");
                },
                error: function error(jqXHR, textStatus, errorThrown) {
                    console.log('error');
                }
            });
        }
    });

    $form.on('change', 'input.ajax_upload', function () {
        var $td = $(this).parents('.upload-img');
        var name = $(this).attr('name');
        var $mention = $td.find('.image-mention');
        var $clone = $(this).clone();
        var simple = $(this).hasClass('simple');
        var $bt = $td.find('.upload-button');

        $mention.text('Enregistrement...').css({ opacity: 1 });
        if (window.FormData && window.XMLHttpRequest && new XMLHttpRequest().upload) {

            var formdata = new FormData();
            var $that = $(this);
            formdata.append("action", 'upload_photos');
            formdata.append("ajax_upload", this.files[0]);

            var xhr = new XMLHttpRequest();

            /* event listeners */
            xhr.upload.addEventListener("progress", function (x) {
                var uped = x.position || x.loaded;
            }, false);
            xhr.addEventListener("load", function (x) {
                $that.remove();
                ajaxSuccess(x.target.responseText, name, $td);
            }, false);
            xhr.addEventListener("error", function () {
                console.log('error');
            }, false);
            xhr.addEventListener("abort", function () {
                console.log('abort');
            }, false);
            xhr.open("POST", workflow.ajaxurl + '?action=upload_photos');
            xhr.send(formdata);
        } else {
            var $form = $('<form>');
            $form.attr({
                action: workflow.ajaxurl + '?action=upload_photos',
                method: 'POST',
                enctype: 'multipart/form-data'
            });

            $form.append($(this).attr('name', 'ajax_upload'));
            $form.append('<input type="hidden" name="action" value="' + 'upload_photos' + '" />');
            $form.appendTo($('body'));

            $form.ajaxSubmit({
                success: function success(data) {
                    ajaxSuccess(data);
                }
            });
        }
        function ajaxSuccess(data) {
            if (typeof data == 'string') data = $.parseJSON(data);

            $td.append($clone.val(''));
            if (data.error) {
                if (simple) {
                    $mention.html('Fichier trop lourd ou type non accepté.').addClass('error');
                }
            } else {
                if (simple) {

                    $mention.html('Fichier sélectionné : ' + data.title).removeClass('error');
                    $td.find('input').eq(0).val(data.url);
                }
            }
        }
    });
}

function validateEmail(email) {
    var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
}
'use strict';

var TM = TweenMax,
    ww = void 0,
    wh = void 0,
    mobileHeight = 700,
    $window = void 0,
    mobileScreen = void 0,
    $body = void 0,
    $loader = void 0,
    $footer = void 0,
    $header = void 0,
    headerHeight = void 0,
    smallScreen = void 0,
    windowFocused = true;

var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0,
    // Opera 8.0+ (UA detection to detect Blink/v8-powered Opera)
isFirefox = typeof InstallTrigger !== 'undefined',
    // Firefox 1.0+
isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0,
    // At least Safari 3+: "[object HTMLElementConstructor]"
isChrome = !!window.chrome && !isOpera,
    // Chrome 1+
isIE = /*@cc_on!@*/false || !!document.documentMode,
    // At least IE6
isEdge = navigator.userAgent.indexOf(' Edge/') >= 0;

window.mobileAndTabletcheck = function () {
    var check = false;
    (function (a) {
        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
    })(navigator.userAgent || navigator.vendor || window.opera);
    return check;
};
var isTouch = window.isMobileTablet;

window.isMobileTablet = window.mobileAndTabletcheck();

window.mobilecheck = function () {
    var check = false;
    (function (a) {
        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
    })(navigator.userAgent || navigator.vendor || window.opera);
    return check;
};
if (window.isMobileTablet) {
    window.isMobile = window.mobilecheck();
}

window.isRetina = window.devicePixelRatio > 1 || window.matchMedia && window.matchMedia("(-webkit-min-device-pixel-ratio: 1.5),(-moz-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5)").matches;

var app = {};

function EventManager() {}

EventManager.INIT_COMPLETE = 'event_init_complete';
EventManager.INTERFACE_COMPLETE = 'event_interface_complete';
EventManager.IMGS_TRANSFORMED = 'event_images_transform';
EventManager.IMGS_PRELOADED = 'event_images_loaded';
EventManager.IMGS_CROPPED = 'event_images_cropped';
EventManager.IMGS_LAZYLOADED = 'event_images_lazyloaded';
EventManager.LOADER_READY = 'event_loader_ready';

window.onload = function () {
    //console.log('WINDOW ONLOAD');

    //console.log('READY');
    $window = $(window);
    $header = $('header');
    $body = $('body');
    $footer = $('footer');

    // Stop click touch
    FastClick.attach(document.body);

    // EVents
    $(document).on(EventManager.INIT_COMPLETE, handlerInitComplete);
    $(document).on(EventManager.IMGS_PRELOADED, handlerImageComplete);
    $(document).on(EventManager.IMGS_CROPPED, handlerinterfaceComplete);
    $(document).on(EventManager.LOADER_READY, handlerLoaderReady);
    // First image to load
    //let firstImg = new Image();

    var $loader = $('#main-loader');

    var data_anim = {
        wrapper: $loader[0],
        loop: false,
        autoplay: false,
        renderer: 'svg',
        path: dapper.theme + '/assets/bodymovin/loader.json',
        rendererSettings: {
            clearCanvas: true,
            progressiveLoad: false
        }
    };

    var svgAnim = bodymovin.loadAnimation(data_anim);
    svgAnim.play();

    /*
    firstImg.src =  $('#first-img-loaded').attr('src');
    firstImg.onload = function() {
        // console.log('Lets go loading');
        $.event.trigger(EventManager.INIT_COMPLETE);
    };
    */

    $.event.trigger(EventManager.INIT_COMPLETE);
};

jQuery(document).ready(function () {
    // console.log('JQUERY READY');
});

function handlerLoaderReady() {}

function handlerInitComplete() {

    // console.log('EVENT :: INIT_COMPLETE');

    $(window).scrollTop(0);

    // Loader Manager
    app.LoaderManager = new LoaderManager();

    var _images = $('img');
    app.LoaderManager.loadAllImages(_images);

    // Website
    app.Website = new Website();

    // Wishlist
    app.Wishlist = new Wishlist();

    // RESIZING
    $(window).on('resize', function () {
        app.Website.setSizes();
        app.Website.cropImages();
    });

    // Header
    app.Header = new Header();

    // lexidapper
    Lexidapper.init();

    // NEWSLETTER
    new Newsletter($('#newsletter-form'));

    // COOKIE
    app.Cookies = new CookiesMessage();
}

function handlerImageComplete(e) {

    //console.log('EVENT :: IMGS_PRELOADED');

    // console.log('mywebsite', app.Website);

    app.Website.cropImages();
}

function handlerinterfaceComplete(e) {

    // console.log('EVENT :: IMGS_CROPPED');

    if (!app.Website.firstload) {
        app.Website.firstload = true;
        app.currentView = new PageView();
    }
}